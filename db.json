{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/Render-line-001.png","path":"images/Render-line-001.png","modified":0,"renderable":0},{"_id":"source/images/glfw3-forward-compatibility.png","path":"images/glfw3-forward-compatibility.png","modified":0,"renderable":0},{"_id":"source/images/test.png","path":"images/test.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/About/index.md","hash":"96c22fe4ebbe84feddd3115afed22cc6f808ddce","modified":1739945446662},{"_id":"source/_posts/Hexo-Next搭建记录.md","hash":"96e286d2686dcdc601d1efaa68b3530c83cb1391","modified":1739945446662},{"_id":"source/_posts/Hexo-Next样式美化.md","hash":"322fbe53fd79eb03184679530e8ec434debad6e2","modified":1739945446662},{"_id":"source/_posts/OpenGL Context创建时需要设置的一些字段.md","hash":"097dba0d20e327ca74473122274b78c7c3760194","modified":1739945446662},{"_id":"source/_posts/Render-line.md","hash":"5fda2b5134d62588ba23e789a3f2046381d5f69d","modified":1739945446663},{"_id":"source/_posts/hello-world.md","hash":"025321c0f6fa9c24a0053f7991ae9102f22941ee","modified":1739945446663},{"_id":"source/_posts/利用人脸检测关键点简单分割合并操作.md","hash":"ae87eb220fa554a0458bbc8136530a4f7fa2885c","modified":1739945446664},{"_id":"source/categories/index.md","hash":"0ca60f18bbf713b5115b07fb11fd460896a031de","modified":1739945446664},{"_id":"source/_posts/测试.md","hash":"c0d40b75a31999fe727b85ad4cf5a919af96947a","modified":1739945446664},{"_id":"source/images/Render-line-001.png","hash":"55f99e246e36963f9083629e684c225a3d49dc19","modified":1739771288069},{"_id":"source/images/test.png","hash":"8562791f65074a6c7421dc77e900a7ae1f65c0ca","modified":1739772302467},{"_id":"source/tags/index.md","hash":"c70037929c1f130101ae1cbe8c7ff74c9dc9b3b8","modified":1739945446902},{"_id":"source/images/glfw3-forward-compatibility.png","hash":"3d9e9978de743c0178d6cf3889fd55d0946e88cd","modified":1739945446902},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1739759191110},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1739759191111},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1739759191111},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1739759191111},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1739759191112},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1739759191112},{"_id":"themes/next/_config.yml","hash":"e5d4ee5c53dad5ca46ce27ee54043d327abd52ee","modified":1739759191112},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1739759191121},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1739759191112},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1739759191112},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1739759191112},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1739759191115},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1739759191111},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1739759191111},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1739759191111},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1739759191111},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1739759191111},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1739759191111},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1739759191111},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1739759191111},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1739759191111},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1739759191111},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1739759191111},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1739759191112},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1739759191113},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1739759191113},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1739759191113},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1739759191113},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1739759191113},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1739759191115},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739759191115},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1739759191115},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1739759191115},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1739759191115},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1739759191116},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1739759191115},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1739759191116},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1739759191116},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1739759191116},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1739759191116},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1739759191116},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1739759191116},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1739759191116},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1739759191116},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1739759191116},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1739759191116},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1739759191116},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1739759191116},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1739759191116},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1739759191116},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1739759191116},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1739759191121},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1739759191117},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1739759191121},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1739759191121},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1739759191121},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1739759191121},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1739759191121},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1739759191122},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1739759191113},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1739759191113},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1739759191111},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1739759191111},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1739759191113},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1739759191111},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1739759191111},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1739759191113},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1739759191114},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1739759191113},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1739759191114},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1739759191114},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1739759191114},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1739759191115},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1739759191115},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1739759191114},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1739759191115},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1739759191117},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1739759191117},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1739759191117},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1739759191117},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1739759191117},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1739759191119},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1739759191117},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1739759191117},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1739759191119},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1739759191119},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1739759191119},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1739759191119},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1739759191120},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1739759191119},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1739759191119},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1739759191121},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1739759191121},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1739759191121},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1739759191122},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1739759191122},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1739759191122},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1739759191122},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1739759191122},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1739759191122},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1739759191122},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1739759191122},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1739759191122},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1739759191124},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1739759191124},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1739759191124},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1739759191124},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1739759191124},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1739759191124},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1739759191124},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1739759191124},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1739759191124},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1739759191124},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1739759191124},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1739759191128},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1739759191130},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1739759191130},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1739759191115},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1739759191130},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1739759191115},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1739759191130},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1739759191131},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1739759191130},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1739759191130},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1739759191131},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1739759191131},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1739759191131},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1739759191131},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1739759191131},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1739759191131},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1739759191131},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1739759191131},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1739759191131},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1739759191131},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1739759191132},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1739759191133},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1739759191117},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1739759191117},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1739759191117},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1739759191117},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1739759191117},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1739759191117},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1739759191117},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1739759191117},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1739759191117},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1739759191118},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1739759191118},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1739759191118},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1739759191117},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1739759191118},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1739759191117},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1739759191118},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1739759191119},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1739759191119},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1739759191119},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1739759191119},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1739759191119},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1739759191118},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1739759191119},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1739759191119},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1739759191119},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1739759191119},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1739759191119},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1739759191120},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1739759191120},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1739759191119},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1739759191121},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1739759191119},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1739759191119},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1739759191120},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1739759191120},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1739759191120},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1739759191120},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1739759191121},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1739759191121},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1739759191121},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1739759191121},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1739759191121},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1739759191121},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1739759191121},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1739759191120},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1739759191121},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1739759191121},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1739759191121},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1739759191122},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1739759191122},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1739759191122},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1739759191131},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1739759191122},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1739759191122},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1739759191131},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1739759191130},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1739759191130},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1739759191132},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1739759191134},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1739759191130},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1739759191130},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1739759191124},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1739759191134},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1739759191124},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1739759191130},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1739759191126},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1739759191124},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1739759191128},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1739759191127},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1739759191127},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1739759191128},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1739759191128},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1739759191112},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1739759191129},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1739759191127},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1739759191129},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1739759191132},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1739759191129},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1739759191130},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1739759191130},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1739759191124},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1739759191133},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1739759191133},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1739759191124},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1739759191130},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1739759191126},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1739759191130},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1739759191125},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1739759191124},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1739759191126},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"db285cba23c8d5fc30ef7884648d4ac0d6780084","modified":1739863821572},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1739759191126},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1739759191126},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1739759191126},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1739759191127},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1739759191127},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1739759191128},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1739759191128},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1739759191126},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1739759191128},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1739759191126},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1739759191128},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1739759191134},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1739759191133},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1739759191126},{"_id":"public/About/index.html","hash":"b755fbc1af350cd5ec47a6c7b288da8857b0229a","modified":1739947044012},{"_id":"public/categories/index.html","hash":"1c776b5448eea57feaa1e198d19c99df729db746","modified":1739947044012},{"_id":"public/tags/index.html","hash":"85b049d0ebe96e60e2dbcdf9c1cd874b1ec9ff69","modified":1739947044012},{"_id":"public/2025/02/19/OpenGL Context创建时需要设置的一些字段/index.html","hash":"c2f8c13a8642f3b74c69deea72aaef15b96fe8c5","modified":1739947044012},{"_id":"public/2025/02/17/Render-line/index.html","hash":"7162f6c91eacf452165f1bde10abf6315d6dc7aa","modified":1739947044012},{"_id":"public/2025/02/18/Hexo-Next样式美化/index.html","hash":"835d609c9643eabed4e7a5904bd79aaba03e335e","modified":1739947044012},{"_id":"public/2025/02/14/利用人脸检测关键点简单分割合并操作/index.html","hash":"48472ea588a4d0827c4abdc209d7cfa25fbbc134","modified":1739947044012},{"_id":"public/2022/12/24/测试/index.html","hash":"4e88320a9fb5b03201a156129b0854a3570ee757","modified":1739947044012},{"_id":"public/2022/12/24/Hexo-Next搭建记录/index.html","hash":"0824df72341f1f6d763121b98983f09b8002555f","modified":1739947044012},{"_id":"public/2022/12/24/hello-world/index.html","hash":"2832876d7d2432f5970c25760d878e16fde19283","modified":1739947044012},{"_id":"public/archives/index.html","hash":"b549dc53252948ffdd67fe3938d1644dac77284a","modified":1739947044012},{"_id":"public/archives/2025/index.html","hash":"f9f10334734b78f096528520d920b8541eded144","modified":1739947044012},{"_id":"public/archives/2022/index.html","hash":"cfbb6109d8e9f4828cd37710fd79b7e45910a4f4","modified":1739947044012},{"_id":"public/index.html","hash":"cd6bcf4a259d1743a370a15586c7593fd9a81c9b","modified":1739947044012},{"_id":"public/archives/2022/12/index.html","hash":"ad8327b454b4ed99a777799db2cb9e2d9f9830da","modified":1739947044012},{"_id":"public/archives/2025/02/index.html","hash":"8e44753ae814507711183f3feae018f67766c1fc","modified":1739947044012},{"_id":"public/categories/python/index.html","hash":"f890b425f0f3e0a4bc38fedc89e868c95857e30a","modified":1739947044012},{"_id":"public/categories/Hexo-Next/index.html","hash":"b7b42ff98d64f2161a9c98b2f78b3bcf23fb5d58","modified":1739947044012},{"_id":"public/categories/Computer-Graphics/index.html","hash":"9609155eb1b30567075a056f602c3f9cf241fb6d","modified":1739947044012},{"_id":"public/categories/Computer-Graphics/OpenGL/index.html","hash":"967a994bd5b972d2ab52442ee3a35f5147a5f43e","modified":1739947044012},{"_id":"public/tags/Hexo/index.html","hash":"8430263ea34b3f357bc7bd78a0afa067692212b5","modified":1739947044012},{"_id":"public/tags/Hexo-Next/index.html","hash":"8c14ba6329647161b020e955029613220e3c12b1","modified":1739947044012},{"_id":"public/tags/Next/index.html","hash":"38e49840d75077e004348422ec2bec3013aef0aa","modified":1739947044012},{"_id":"public/tags/Computer-Graphics/index.html","hash":"2395d6cb98130b024d35621017b2345c5a4637f2","modified":1739947044012},{"_id":"public/tags/OpenGL/index.html","hash":"e8fa273d2d16a19408f380e30c0e09d85619717c","modified":1739947044012},{"_id":"public/tags/opencv/index.html","hash":"e4f660fb5c50f8b43b2aea022a18c7794429371f","modified":1739947044012},{"_id":"public/tags/python/index.html","hash":"6e76f8534214672de12a0acc0d837e9249e525c2","modified":1739947044012},{"_id":"public/images/Render-line-001.png","hash":"55f99e246e36963f9083629e684c225a3d49dc19","modified":1739947044012},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1739947044012},{"_id":"public/images/test.png","hash":"8562791f65074a6c7421dc77e900a7ae1f65c0ca","modified":1739947044012},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1739947044012},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1739947044012},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1739947044012},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1739947044012},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1739947044012},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1739947044012},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1739947044012},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1739947044012},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1739947044012},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1739947044012},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1739947044012},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1739947044012},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1739947044012},{"_id":"public/images/glfw3-forward-compatibility.png","hash":"3d9e9978de743c0178d6cf3889fd55d0946e88cd","modified":1739947044012},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1739947044012},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1739947044012},{"_id":"public/css/main.css","hash":"af5e340d5b7ba1de5bc319333ab86f0771e8844a","modified":1739947044012},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1739947044012},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1739947044012},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1739947044012},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1739947044012},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1739947044012},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1739947044012},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1739947044012},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1739947044012},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1739947044012},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1739947044012},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1739947044012},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1739947044012}],"Category":[{"name":"Hexo-Next","_id":"cm7bjjnmr0004hkvc2lgmfjmw"},{"name":"Computer Graphics","_id":"cm7bjjnmu000fhkvcfcfz7537"},{"name":"python","_id":"cm7bjjnmv000lhkvc6zr5d8fp"},{"name":"OpenGL","parent":"cm7bjjnmu000fhkvcfcfz7537","_id":"cm7bjjnmw000rhkvc8qio12ao"}],"Data":[],"Page":[{"title":"about","date":"2022-12-24T14:44:45.000Z","_content":"","source":"About/index.md","raw":"---\ntitle: about\ndate: 2022-12-24 22:44:45\n---\n","updated":"2025-02-19T06:10:46.662Z","path":"About/index.html","comments":1,"layout":"page","_id":"cm7bjjnmn0000hkvc0ypggk3m","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2025-02-17T02:31:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-02-17 10:31:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2025-02-19T06:10:46.664Z","path":"categories/index.html","layout":"page","_id":"cm7bjjnmq0002hkvcb01shup2","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-12-24T14:55:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-24 22:55:57\ntype: \"tags\"\n---\n","updated":"2025-02-19T06:10:46.902Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm7bjjnms0006hkvc9z8x8fno","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo-Next搭建记录","date":"2022-12-24T14:53:34.000Z","_content":"\n\n看到很多人的主页做的好看丝滑又专业，不免得想拥有一个自己的。最开始使用[Github Pages](https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll)的默认静态网页生成器[jekyll](https://jekyllrb.com/)搭建了一个，但是奈何觉得有些复杂和浮夸。搜索一番，发现[Hexo](https://hexo.io/zh-cn/)和[NexT Theme](https://theme-next.js.org/)使用广泛，而且找到了我想要的比较简洁的风格示例，比如[木鸟杂记](https://www.qtmuniao.com/)、[IIssNan's Notes](https://notes.iissnan.com/)、[NightTeam](https://nightteam.github.io/)，在阅读官方文档和热情网友分享的文章（比如[如何在 GitHub 上写博客？](https://www.zhihu.com/question/20962496)）中，在不懂得各种前端知识情况下，一步步搭建了一个机遇GitHub Pages + Hexo + NexT的个人主页。刚刚开始，对于Hexo一点儿也不熟悉，还有很多需要配置的地方，但是趁着热乎劲，把搭建的历程记录下来，为后来者以参考，为自己以作备忘。\n\n> Note: 完工之后回头看，由于对相关背景知识不了解，胡乱查了很多，其实Hexo的官方文档才是最好的教学和参考，详尽而工整，是很好的技术文档范例，而且有中文版哟～\n\n1. 个人主页的文件是以repo的形式托管在GitHub上的，所以第一步要创建一个名为 {username}.github.io的项目，按照[creating a github pages site](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site)一步步操作即可。\n\n2. 安装Nodejs和Hexo, [Hexo Overview](https://hexo.io/docs/)\n- Install Node.js from [official installer](https://nodejs.org/en/download/)\n- Install Hexo, 通过一下命令可以安装bash中`全局可见`的命令\n``` bash\nnpm install -g hexo-cli\n```\n\n3. 在本地初始化个人主页项目，按照[Hexo Setup](https://hexo.io/docs/setup)操作，一路无险\n``` bash\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n4. Hexo的基础操作，[Hexo Command](https://hexo.io/docs/commands)\n- 新建一个主页项目\n``` bash\nhexo init <folder>\n```\n- 生成网页，在public文件夹里\n``` bash\nhexo generate\n```\n- 本地运行，启动一个本地服务器，在浏览器通过http://localhost:4000/就可以查看生成的个人主页了。\n``` bash\nhexo server\n```\n- clean\n``` bash\nhexo clean\n```\n\n5. Hexo的部署，即把个人主页托管到GitHub上，[Hexo Deplyment]()\n- 一种方式是通过Hexo的一键部署，可以参考[One-comman deployment](https://hexo.io/docs/github-pages#One-command-deployment)，目的是将本地生产的个人主页文件push到步骤1中创建的远程项目的gh-pages分支上。这种方式的好处是，不需要在github上托管个人主页的源文件。\n- 由于对gitlab的CI/CD比较熟悉，我选择了第二种方式，利用Github Action，按照[Deployment/GitHub Pages](https://hexo.io/docs/github-pages)配置GitHub的CD配置文件，在检测到源文件分支的push操作时候，就能GitHub的Runner机器上自动化生产个人主页并推送到gp-pages分支，是不是很方便。\n``` yml\nname: Pages\n\non:\n  push:\n    branches:\n      - master # default branch\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true \n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"16\"\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n6. 应用主题，[NexT]()\n- Install NexT, 将hexo-theme-next项目放在themes/next目录下，把next的文件作为个人主页工程源码的一部分，修改项目配置文件`_config.yml`中`theme`项为`theme: next`，继续按照以上操作即可\n``` bash\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n但是，我将hexo-theme-next作为submodule使用，则需要在GitHub Action配置文件中需要额外添加submoudle的配置，否则GitHub CD中不能正确下载主题，也就无法正确生成主页文件了。我在这一块花费了一些时间。\n``` yml\n        with:\n          submodules: true \n```\n\n7. 配置\n- [Using an Alternate Config](https://hexo.io/docs/configuration#Using-an-Alternate-Config)\n- [Hexo Next 主题进阶设置](https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/)\n\n8. 结语\n> Hexo、NexT文档详尽，按照以上操作，恭喜你，你已经拥有一个属于自己的个人主页了。但是，要配置出一个更有逼格更符合个人审美要求的主页，就要多了解NexT的配置了。\n> 查阅[Hexo writing](https://hexo.io/docs/writing)开启写作之旅吧～～\n","source":"_posts/Hexo-Next搭建记录.md","raw":"---\ntitle: Hexo-Next搭建记录\ndate: 2022-12-24 22:53:34\ncategories:\n- Hexo-Next\ntags: \n- Hexo\n- Next\n---\n\n\n看到很多人的主页做的好看丝滑又专业，不免得想拥有一个自己的。最开始使用[Github Pages](https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll)的默认静态网页生成器[jekyll](https://jekyllrb.com/)搭建了一个，但是奈何觉得有些复杂和浮夸。搜索一番，发现[Hexo](https://hexo.io/zh-cn/)和[NexT Theme](https://theme-next.js.org/)使用广泛，而且找到了我想要的比较简洁的风格示例，比如[木鸟杂记](https://www.qtmuniao.com/)、[IIssNan's Notes](https://notes.iissnan.com/)、[NightTeam](https://nightteam.github.io/)，在阅读官方文档和热情网友分享的文章（比如[如何在 GitHub 上写博客？](https://www.zhihu.com/question/20962496)）中，在不懂得各种前端知识情况下，一步步搭建了一个机遇GitHub Pages + Hexo + NexT的个人主页。刚刚开始，对于Hexo一点儿也不熟悉，还有很多需要配置的地方，但是趁着热乎劲，把搭建的历程记录下来，为后来者以参考，为自己以作备忘。\n\n> Note: 完工之后回头看，由于对相关背景知识不了解，胡乱查了很多，其实Hexo的官方文档才是最好的教学和参考，详尽而工整，是很好的技术文档范例，而且有中文版哟～\n\n1. 个人主页的文件是以repo的形式托管在GitHub上的，所以第一步要创建一个名为 {username}.github.io的项目，按照[creating a github pages site](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site)一步步操作即可。\n\n2. 安装Nodejs和Hexo, [Hexo Overview](https://hexo.io/docs/)\n- Install Node.js from [official installer](https://nodejs.org/en/download/)\n- Install Hexo, 通过一下命令可以安装bash中`全局可见`的命令\n``` bash\nnpm install -g hexo-cli\n```\n\n3. 在本地初始化个人主页项目，按照[Hexo Setup](https://hexo.io/docs/setup)操作，一路无险\n``` bash\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n4. Hexo的基础操作，[Hexo Command](https://hexo.io/docs/commands)\n- 新建一个主页项目\n``` bash\nhexo init <folder>\n```\n- 生成网页，在public文件夹里\n``` bash\nhexo generate\n```\n- 本地运行，启动一个本地服务器，在浏览器通过http://localhost:4000/就可以查看生成的个人主页了。\n``` bash\nhexo server\n```\n- clean\n``` bash\nhexo clean\n```\n\n5. Hexo的部署，即把个人主页托管到GitHub上，[Hexo Deplyment]()\n- 一种方式是通过Hexo的一键部署，可以参考[One-comman deployment](https://hexo.io/docs/github-pages#One-command-deployment)，目的是将本地生产的个人主页文件push到步骤1中创建的远程项目的gh-pages分支上。这种方式的好处是，不需要在github上托管个人主页的源文件。\n- 由于对gitlab的CI/CD比较熟悉，我选择了第二种方式，利用Github Action，按照[Deployment/GitHub Pages](https://hexo.io/docs/github-pages)配置GitHub的CD配置文件，在检测到源文件分支的push操作时候，就能GitHub的Runner机器上自动化生产个人主页并推送到gp-pages分支，是不是很方便。\n``` yml\nname: Pages\n\non:\n  push:\n    branches:\n      - master # default branch\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true \n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"16\"\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n6. 应用主题，[NexT]()\n- Install NexT, 将hexo-theme-next项目放在themes/next目录下，把next的文件作为个人主页工程源码的一部分，修改项目配置文件`_config.yml`中`theme`项为`theme: next`，继续按照以上操作即可\n``` bash\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n但是，我将hexo-theme-next作为submodule使用，则需要在GitHub Action配置文件中需要额外添加submoudle的配置，否则GitHub CD中不能正确下载主题，也就无法正确生成主页文件了。我在这一块花费了一些时间。\n``` yml\n        with:\n          submodules: true \n```\n\n7. 配置\n- [Using an Alternate Config](https://hexo.io/docs/configuration#Using-an-Alternate-Config)\n- [Hexo Next 主题进阶设置](https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/)\n\n8. 结语\n> Hexo、NexT文档详尽，按照以上操作，恭喜你，你已经拥有一个属于自己的个人主页了。但是，要配置出一个更有逼格更符合个人审美要求的主页，就要多了解NexT的配置了。\n> 查阅[Hexo writing](https://hexo.io/docs/writing)开启写作之旅吧～～\n","slug":"Hexo-Next搭建记录","published":1,"updated":"2025-02-19T06:10:46.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmo0001hkvc9hhm6f5f","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>看到很多人的主页做的好看丝滑又专业，不免得想拥有一个自己的。最开始使用<a href=\"https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll\">Github Pages</a>的默认静态网页生成器<a href=\"https://jekyllrb.com/\">jekyll</a>搭建了一个，但是奈何觉得有些复杂和浮夸。搜索一番，发现<a href=\"https://hexo.io/zh-cn/\">Hexo</a>和<a href=\"https://theme-next.js.org/\">NexT Theme</a>使用广泛，而且找到了我想要的比较简洁的风格示例，比如<a href=\"https://www.qtmuniao.com/\">木鸟杂记</a>、<a href=\"https://notes.iissnan.com/\">IIssNan’s Notes</a>、<a href=\"https://nightteam.github.io/\">NightTeam</a>，在阅读官方文档和热情网友分享的文章（比如<a href=\"https://www.zhihu.com/question/20962496\">如何在 GitHub 上写博客？</a>）中，在不懂得各种前端知识情况下，一步步搭建了一个机遇GitHub Pages + Hexo + NexT的个人主页。刚刚开始，对于Hexo一点儿也不熟悉，还有很多需要配置的地方，但是趁着热乎劲，把搭建的历程记录下来，为后来者以参考，为自己以作备忘。</p>\n<blockquote>\n<p>Note: 完工之后回头看，由于对相关背景知识不了解，胡乱查了很多，其实Hexo的官方文档才是最好的教学和参考，详尽而工整，是很好的技术文档范例，而且有中文版哟～</p>\n</blockquote>\n<ol>\n<li><p>个人主页的文件是以repo的形式托管在GitHub上的，所以第一步要创建一个名为 {username}.github.io的项目，按照<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\">creating a github pages site</a>一步步操作即可。</p>\n</li>\n<li><p>安装Nodejs和Hexo, <a href=\"https://hexo.io/docs/\">Hexo Overview</a></p>\n</li>\n</ol>\n<ul>\n<li>Install Node.js from <a href=\"https://nodejs.org/en/download/\">official installer</a></li>\n<li>Install Hexo, 通过一下命令可以安装bash中<code>全局可见</code>的命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>在本地初始化个人主页项目，按照<a href=\"https://hexo.io/docs/setup\">Hexo Setup</a>操作，一路无险</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Hexo的基础操作，<a href=\"https://hexo.io/docs/commands\">Hexo Command</a></p>\n</li>\n</ol>\n<ul>\n<li>新建一个主页项目<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure></li>\n<li>生成网页，在public文件夹里<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>本地运行，启动一个本地服务器，在浏览器通过<a href=\"http://localhost:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E7%94%9F%E6%88%90%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BA%86%E3%80%82\">http://localhost:4000/就可以查看生成的个人主页了。</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>clean<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>Hexo的部署，即把个人主页托管到GitHub上，<a href=\"\">Hexo Deplyment</a></li>\n</ol>\n<ul>\n<li>一种方式是通过Hexo的一键部署，可以参考<a href=\"https://hexo.io/docs/github-pages#One-command-deployment\">One-comman deployment</a>，目的是将本地生产的个人主页文件push到步骤1中创建的远程项目的gh-pages分支上。这种方式的好处是，不需要在github上托管个人主页的源文件。</li>\n<li>由于对gitlab的CI&#x2F;CD比较熟悉，我选择了第二种方式，利用Github Action，按照<a href=\"https://hexo.io/docs/github-pages\">Deployment&#x2F;GitHub Pages</a>配置GitHub的CD配置文件，在检测到源文件分支的push操作时候，就能GitHub的Runner机器上自动化生产个人主页并推送到gp-pages分支，是不是很方便。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># default branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pages:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">16.</span><span class=\"string\">x</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;16&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"6\">\n<li>应用主题，<a href=\"\">NexT</a></li>\n</ol>\n<ul>\n<li>Install NexT, 将hexo-theme-next项目放在themes&#x2F;next目录下，把next的文件作为个人主页工程源码的一部分，修改项目配置文件<code>_config.yml</code>中<code>theme</code>项为<code>theme: next</code>，继续按照以上操作即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n但是，我将hexo-theme-next作为submodule使用，则需要在GitHub Action配置文件中需要额外添加submoudle的配置，否则GitHub CD中不能正确下载主题，也就无法正确生成主页文件了。我在这一块花费了一些时间。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">with:</span></span><br><span class=\"line\">  <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"7\">\n<li>配置</li>\n</ol>\n<ul>\n<li><a href=\"https://hexo.io/docs/configuration#Using-an-Alternate-Config\">Using an Alternate Config</a></li>\n<li><a href=\"https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/\">Hexo Next 主题进阶设置</a></li>\n</ul>\n<ol start=\"8\">\n<li>结语<blockquote>\n<p>Hexo、NexT文档详尽，按照以上操作，恭喜你，你已经拥有一个属于自己的个人主页了。但是，要配置出一个更有逼格更符合个人审美要求的主页，就要多了解NexT的配置了。<br>查阅<a href=\"https://hexo.io/docs/writing\">Hexo writing</a>开启写作之旅吧～～</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>看到很多人的主页做的好看丝滑又专业，不免得想拥有一个自己的。最开始使用<a href=\"https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll\">Github Pages</a>的默认静态网页生成器<a href=\"https://jekyllrb.com/\">jekyll</a>搭建了一个，但是奈何觉得有些复杂和浮夸。搜索一番，发现<a href=\"https://hexo.io/zh-cn/\">Hexo</a>和<a href=\"https://theme-next.js.org/\">NexT Theme</a>使用广泛，而且找到了我想要的比较简洁的风格示例，比如<a href=\"https://www.qtmuniao.com/\">木鸟杂记</a>、<a href=\"https://notes.iissnan.com/\">IIssNan’s Notes</a>、<a href=\"https://nightteam.github.io/\">NightTeam</a>，在阅读官方文档和热情网友分享的文章（比如<a href=\"https://www.zhihu.com/question/20962496\">如何在 GitHub 上写博客？</a>）中，在不懂得各种前端知识情况下，一步步搭建了一个机遇GitHub Pages + Hexo + NexT的个人主页。刚刚开始，对于Hexo一点儿也不熟悉，还有很多需要配置的地方，但是趁着热乎劲，把搭建的历程记录下来，为后来者以参考，为自己以作备忘。</p>\n<blockquote>\n<p>Note: 完工之后回头看，由于对相关背景知识不了解，胡乱查了很多，其实Hexo的官方文档才是最好的教学和参考，详尽而工整，是很好的技术文档范例，而且有中文版哟～</p>\n</blockquote>\n<ol>\n<li><p>个人主页的文件是以repo的形式托管在GitHub上的，所以第一步要创建一个名为 {username}.github.io的项目，按照<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\">creating a github pages site</a>一步步操作即可。</p>\n</li>\n<li><p>安装Nodejs和Hexo, <a href=\"https://hexo.io/docs/\">Hexo Overview</a></p>\n</li>\n</ol>\n<ul>\n<li>Install Node.js from <a href=\"https://nodejs.org/en/download/\">official installer</a></li>\n<li>Install Hexo, 通过一下命令可以安装bash中<code>全局可见</code>的命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>在本地初始化个人主页项目，按照<a href=\"https://hexo.io/docs/setup\">Hexo Setup</a>操作，一路无险</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Hexo的基础操作，<a href=\"https://hexo.io/docs/commands\">Hexo Command</a></p>\n</li>\n</ol>\n<ul>\n<li>新建一个主页项目<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure></li>\n<li>生成网页，在public文件夹里<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>本地运行，启动一个本地服务器，在浏览器通过<a href=\"http://localhost:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E7%94%9F%E6%88%90%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BA%86%E3%80%82\">http://localhost:4000/就可以查看生成的个人主页了。</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>clean<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>Hexo的部署，即把个人主页托管到GitHub上，<a href=\"\">Hexo Deplyment</a></li>\n</ol>\n<ul>\n<li>一种方式是通过Hexo的一键部署，可以参考<a href=\"https://hexo.io/docs/github-pages#One-command-deployment\">One-comman deployment</a>，目的是将本地生产的个人主页文件push到步骤1中创建的远程项目的gh-pages分支上。这种方式的好处是，不需要在github上托管个人主页的源文件。</li>\n<li>由于对gitlab的CI&#x2F;CD比较熟悉，我选择了第二种方式，利用Github Action，按照<a href=\"https://hexo.io/docs/github-pages\">Deployment&#x2F;GitHub Pages</a>配置GitHub的CD配置文件，在检测到源文件分支的push操作时候，就能GitHub的Runner机器上自动化生产个人主页并推送到gp-pages分支，是不是很方便。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># default branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pages:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">16.</span><span class=\"string\">x</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;16&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"6\">\n<li>应用主题，<a href=\"\">NexT</a></li>\n</ol>\n<ul>\n<li>Install NexT, 将hexo-theme-next项目放在themes&#x2F;next目录下，把next的文件作为个人主页工程源码的一部分，修改项目配置文件<code>_config.yml</code>中<code>theme</code>项为<code>theme: next</code>，继续按照以上操作即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n但是，我将hexo-theme-next作为submodule使用，则需要在GitHub Action配置文件中需要额外添加submoudle的配置，否则GitHub CD中不能正确下载主题，也就无法正确生成主页文件了。我在这一块花费了一些时间。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">with:</span></span><br><span class=\"line\">  <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"7\">\n<li>配置</li>\n</ol>\n<ul>\n<li><a href=\"https://hexo.io/docs/configuration#Using-an-Alternate-Config\">Using an Alternate Config</a></li>\n<li><a href=\"https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/\">Hexo Next 主题进阶设置</a></li>\n</ul>\n<ol start=\"8\">\n<li>结语<blockquote>\n<p>Hexo、NexT文档详尽，按照以上操作，恭喜你，你已经拥有一个属于自己的个人主页了。但是，要配置出一个更有逼格更符合个人审美要求的主页，就要多了解NexT的配置了。<br>查阅<a href=\"https://hexo.io/docs/writing\">Hexo writing</a>开启写作之旅吧～～</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Hexo-Next样式美化","date":"2025-02-18T08:02:14.000Z","_content":"\n收录经过整合和验证的Hexo-Next配置方案，主要内容来自于网络技术文章，并给出出处，感谢网络大佬们的分享~\n\n1. 修改超链接颜色\n- [Hexo Next 修改超链接颜色](https://blackchy.com/2019/09/30/2019-09-30-Hexo-Next-Link-Color/)\n- [Hexo Next博客优化](https://maoao530.github.io/2017/01/25/hexo-blog-seo/)\n在./themes/next/source/css/_custom/custom.styl里添加如下代码\n``` css\n.post-body a:not(.btn){\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\na:not(.btn)避免修改首页的”阅读全文”按钮的样式\n\n","source":"_posts/Hexo-Next样式美化.md","raw":"---\ntitle: Hexo-Next样式美化\ndate: 2025-02-18 16:02:14\ncategories:\n- Hexo-Next\ntags: \n- Hexo-Next\n---\n\n收录经过整合和验证的Hexo-Next配置方案，主要内容来自于网络技术文章，并给出出处，感谢网络大佬们的分享~\n\n1. 修改超链接颜色\n- [Hexo Next 修改超链接颜色](https://blackchy.com/2019/09/30/2019-09-30-Hexo-Next-Link-Color/)\n- [Hexo Next博客优化](https://maoao530.github.io/2017/01/25/hexo-blog-seo/)\n在./themes/next/source/css/_custom/custom.styl里添加如下代码\n``` css\n.post-body a:not(.btn){\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\na:not(.btn)避免修改首页的”阅读全文”按钮的样式\n\n","slug":"Hexo-Next样式美化","published":1,"updated":"2025-02-19T06:10:46.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmr0003hkvc23054u05","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>收录经过整合和验证的Hexo-Next配置方案，主要内容来自于网络技术文章，并给出出处，感谢网络大佬们的分享~</p>\n<ol>\n<li>修改超链接颜色</li>\n</ol>\n<ul>\n<li><a href=\"https://blackchy.com/2019/09/30/2019-09-30-Hexo-Next-Link-Color/\">Hexo Next 修改超链接颜色</a></li>\n<li><a href=\"https://maoao530.github.io/2017/01/25/hexo-blog-seo/\">Hexo Next博客优化</a><br>在.&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl里添加如下代码<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.btn</span>)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#0477ab</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\na:not(.btn)避免修改首页的”阅读全文”按钮的样式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>收录经过整合和验证的Hexo-Next配置方案，主要内容来自于网络技术文章，并给出出处，感谢网络大佬们的分享~</p>\n<ol>\n<li>修改超链接颜色</li>\n</ol>\n<ul>\n<li><a href=\"https://blackchy.com/2019/09/30/2019-09-30-Hexo-Next-Link-Color/\">Hexo Next 修改超链接颜色</a></li>\n<li><a href=\"https://maoao530.github.io/2017/01/25/hexo-blog-seo/\">Hexo Next博客优化</a><br>在.&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl里添加如下代码<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.btn</span>)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#0477ab</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\na:not(.btn)避免修改首页的”阅读全文”按钮的样式</li>\n</ul>\n"},{"title":"Render line","date":"2025-02-17T05:44:08.000Z","_content":"\n# 渲染API对于线渲染的支持\n\n\n|          | wireframe | line mode | line width |\n|----------|---------|---------|----------------|\n|  OpenGL  | glPolygonMode(GL_FRONT_AND_BACK, GL_LINE) | glDrawArrays: GL_LINES/GL_LINE_STRIP/GL_LINE_LOOP| glLineWidth |\n| Vulkan   | VkPipelineRasterizationStateCreateInfo/VK_POLYGON_MODE_LINE |  VkPipelineInputAssemblyStateCreateInfo: VK_PRIMITIVE_TOPOLOGY_LINE_LIST/VK_PRIMITIVE_TOPOLOGY_LINE_STRIP | [vkCmdSetLineWidth](https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html), VkPipelineRasterizationStateCreateInfo::lineWidth  |\n|DirectX 11| D3D11_RASTERIZER_DESC/D3D11_FILL_WIREFRAME |  IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_LINELIST)|   | \n|DirectX 12| D3D12_GRAPHICS_PIPELINE_STATE_DESC/D3D12_FILL_WIREFRAME |  D3D12_GRAPHICS_PIPELINE_STATE_DESC/D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE, IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY_LINELIST) |   |\n\n\n\n\nglLineWidth的[文档](https://registry.khronos.org/OpenGL-Refpages/gl4/html/glLineWidth.xhtml)中说只保证宽度1的设置，其他宽度依赖硬件实现。\n> Only width 1 is guaranteed to be supported; others depend on the implementation.\n\n[glspec46.core#678](https://registry.khronos.org/OpenGL/specs/gl/glspec46.core.pdf)把glLineWidth设为Deprecated。\n> Widelines- LineWidthvalues greater than 1.0 will generate an INVALID_VALUE error.\n\nVulkan设置线宽度，如果VkPipelineDynamicStateCreateInfo::pDynamicStates设置了VK_DYNAMIC_STATE_LINE_WIDTH，则使用[vkCmdSetLineWidth](https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html)设置后续的线渲染宽度；否则通过VkPipelineRasterizationStateCreateInfo::lineWidth创建pipeline时设置。如果设置非1.0的宽度，依赖硬件的支持，需要查询硬件是否支持VkphysicalDeviceFeatures::wideLines特性，可以通过[GPUinfo](https://vulkan.gpuinfo.org/listdevices.php)查询。\n> If the wideLines feature is not enabled, lineWidth must be 1.0\n\nDX11/12都没有明确的API和数据结构支持wide line的渲染。只发现[Line Drawing Support in D3DX (Direct3D 9)](https://learn.microsoft.com/en-us/windows/win32/direct3d9/line-drawing-support-in-d3dx)中描述了基于上古D3D9封装的ID3DXLine通过textured polygons来模拟线宽模式设置。\n\n基于我在本地平台测试，在Nvidia GeForce RTX 4080 Super显卡上，~~glLineWidth无效~~，后来发现其实在我的平台上glLineWidth是有效的，主要是因为设置了`glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)`，GLFW_OPENGL_FORWARD_COMPAT导致OpenGL上下文是向前兼容模式，效果就是移除Deprecated的API，glLineWidth就是其中一个(4.6 Deprecated); Vulkan通过VkPipelineRasterizationStateCreateInfo::lineWidth设置宽度有效，且有相应的上限值。在网络上线宽设置无效的技术贴早已有之，比如[glLineWidth and glLineStipple sustainability](https://forums.developer.nvidia.com/t/gllinewidth-and-gllinestipple-sustainability/71654), [glLineWidth - doesn’t work !](https://community.khronos.org/t/gllinewidth-doesnt-work/14052), [Line_width not working in Vulkan](https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan)都有涉及。\n> On my hardware, lines are always 1 pixel large, whatever the parameters are, for many years now. Create polygons for larger lines is the solution that will always work.\n\n可见，虽然各家API各异，但是在线渲染宽度上基本一致，完全取决于驱动的实现和硬件的能力。在一般情况下，即便API给出了设置的接口，却并不能十足相信其能够work，最稳妥的方法，还是通过对线段顶点进行四边形扩展来实现宽线段的渲染。\n\n# 如何渲染线\n\n\n# 抗锯齿\n\n\n# 参考\n\n- [glDrawArrays](https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawArrays.xhtml)\n- [Line_width not working in Vulkan](https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan)\n\n\n\n\n","source":"_posts/Render-line.md","raw":"---\ntitle: Render line\ndate: 2025-02-17 13:44:08\ncategories:\n- Computer Graphics\n- OpenGL\ntags: \n- Computer Graphics\n- OpenGL\n---\n\n# 渲染API对于线渲染的支持\n\n\n|          | wireframe | line mode | line width |\n|----------|---------|---------|----------------|\n|  OpenGL  | glPolygonMode(GL_FRONT_AND_BACK, GL_LINE) | glDrawArrays: GL_LINES/GL_LINE_STRIP/GL_LINE_LOOP| glLineWidth |\n| Vulkan   | VkPipelineRasterizationStateCreateInfo/VK_POLYGON_MODE_LINE |  VkPipelineInputAssemblyStateCreateInfo: VK_PRIMITIVE_TOPOLOGY_LINE_LIST/VK_PRIMITIVE_TOPOLOGY_LINE_STRIP | [vkCmdSetLineWidth](https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html), VkPipelineRasterizationStateCreateInfo::lineWidth  |\n|DirectX 11| D3D11_RASTERIZER_DESC/D3D11_FILL_WIREFRAME |  IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_LINELIST)|   | \n|DirectX 12| D3D12_GRAPHICS_PIPELINE_STATE_DESC/D3D12_FILL_WIREFRAME |  D3D12_GRAPHICS_PIPELINE_STATE_DESC/D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE, IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY_LINELIST) |   |\n\n\n\n\nglLineWidth的[文档](https://registry.khronos.org/OpenGL-Refpages/gl4/html/glLineWidth.xhtml)中说只保证宽度1的设置，其他宽度依赖硬件实现。\n> Only width 1 is guaranteed to be supported; others depend on the implementation.\n\n[glspec46.core#678](https://registry.khronos.org/OpenGL/specs/gl/glspec46.core.pdf)把glLineWidth设为Deprecated。\n> Widelines- LineWidthvalues greater than 1.0 will generate an INVALID_VALUE error.\n\nVulkan设置线宽度，如果VkPipelineDynamicStateCreateInfo::pDynamicStates设置了VK_DYNAMIC_STATE_LINE_WIDTH，则使用[vkCmdSetLineWidth](https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html)设置后续的线渲染宽度；否则通过VkPipelineRasterizationStateCreateInfo::lineWidth创建pipeline时设置。如果设置非1.0的宽度，依赖硬件的支持，需要查询硬件是否支持VkphysicalDeviceFeatures::wideLines特性，可以通过[GPUinfo](https://vulkan.gpuinfo.org/listdevices.php)查询。\n> If the wideLines feature is not enabled, lineWidth must be 1.0\n\nDX11/12都没有明确的API和数据结构支持wide line的渲染。只发现[Line Drawing Support in D3DX (Direct3D 9)](https://learn.microsoft.com/en-us/windows/win32/direct3d9/line-drawing-support-in-d3dx)中描述了基于上古D3D9封装的ID3DXLine通过textured polygons来模拟线宽模式设置。\n\n基于我在本地平台测试，在Nvidia GeForce RTX 4080 Super显卡上，~~glLineWidth无效~~，后来发现其实在我的平台上glLineWidth是有效的，主要是因为设置了`glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)`，GLFW_OPENGL_FORWARD_COMPAT导致OpenGL上下文是向前兼容模式，效果就是移除Deprecated的API，glLineWidth就是其中一个(4.6 Deprecated); Vulkan通过VkPipelineRasterizationStateCreateInfo::lineWidth设置宽度有效，且有相应的上限值。在网络上线宽设置无效的技术贴早已有之，比如[glLineWidth and glLineStipple sustainability](https://forums.developer.nvidia.com/t/gllinewidth-and-gllinestipple-sustainability/71654), [glLineWidth - doesn’t work !](https://community.khronos.org/t/gllinewidth-doesnt-work/14052), [Line_width not working in Vulkan](https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan)都有涉及。\n> On my hardware, lines are always 1 pixel large, whatever the parameters are, for many years now. Create polygons for larger lines is the solution that will always work.\n\n可见，虽然各家API各异，但是在线渲染宽度上基本一致，完全取决于驱动的实现和硬件的能力。在一般情况下，即便API给出了设置的接口，却并不能十足相信其能够work，最稳妥的方法，还是通过对线段顶点进行四边形扩展来实现宽线段的渲染。\n\n# 如何渲染线\n\n\n# 抗锯齿\n\n\n# 参考\n\n- [glDrawArrays](https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawArrays.xhtml)\n- [Line_width not working in Vulkan](https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan)\n\n\n\n\n","slug":"Render-line","published":1,"updated":"2025-02-19T06:10:46.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnms0007hkvc4qbg8nvz","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"渲染API对于线渲染的支持\"><a href=\"#渲染API对于线渲染的支持\" class=\"headerlink\" title=\"渲染API对于线渲染的支持\"></a>渲染API对于线渲染的支持</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>wireframe</th>\n<th>line mode</th>\n<th>line width</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OpenGL</td>\n<td>glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)</td>\n<td>glDrawArrays: GL_LINES&#x2F;GL_LINE_STRIP&#x2F;GL_LINE_LOOP</td>\n<td>glLineWidth</td>\n</tr>\n<tr>\n<td>Vulkan</td>\n<td>VkPipelineRasterizationStateCreateInfo&#x2F;VK_POLYGON_MODE_LINE</td>\n<td>VkPipelineInputAssemblyStateCreateInfo: VK_PRIMITIVE_TOPOLOGY_LINE_LIST&#x2F;VK_PRIMITIVE_TOPOLOGY_LINE_STRIP</td>\n<td><a href=\"https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html\">vkCmdSetLineWidth</a>, VkPipelineRasterizationStateCreateInfo::lineWidth</td>\n</tr>\n<tr>\n<td>DirectX 11</td>\n<td>D3D11_RASTERIZER_DESC&#x2F;D3D11_FILL_WIREFRAME</td>\n<td>IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_LINELIST)</td>\n<td></td>\n</tr>\n<tr>\n<td>DirectX 12</td>\n<td>D3D12_GRAPHICS_PIPELINE_STATE_DESC&#x2F;D3D12_FILL_WIREFRAME</td>\n<td>D3D12_GRAPHICS_PIPELINE_STATE_DESC&#x2F;D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE, IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY_LINELIST)</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>glLineWidth的<a href=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glLineWidth.xhtml\">文档</a>中说只保证宽度1的设置，其他宽度依赖硬件实现。</p>\n<blockquote>\n<p>Only width 1 is guaranteed to be supported; others depend on the implementation.</p>\n</blockquote>\n<p><a href=\"https://registry.khronos.org/OpenGL/specs/gl/glspec46.core.pdf\">glspec46.core#678</a>把glLineWidth设为Deprecated。</p>\n<blockquote>\n<p>Widelines- LineWidthvalues greater than 1.0 will generate an INVALID_VALUE error.</p>\n</blockquote>\n<p>Vulkan设置线宽度，如果VkPipelineDynamicStateCreateInfo::pDynamicStates设置了VK_DYNAMIC_STATE_LINE_WIDTH，则使用<a href=\"https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html\">vkCmdSetLineWidth</a>设置后续的线渲染宽度；否则通过VkPipelineRasterizationStateCreateInfo::lineWidth创建pipeline时设置。如果设置非1.0的宽度，依赖硬件的支持，需要查询硬件是否支持VkphysicalDeviceFeatures::wideLines特性，可以通过<a href=\"https://vulkan.gpuinfo.org/listdevices.php\">GPUinfo</a>查询。</p>\n<blockquote>\n<p>If the wideLines feature is not enabled, lineWidth must be 1.0</p>\n</blockquote>\n<p>DX11&#x2F;12都没有明确的API和数据结构支持wide line的渲染。只发现<a href=\"https://learn.microsoft.com/en-us/windows/win32/direct3d9/line-drawing-support-in-d3dx\">Line Drawing Support in D3DX (Direct3D 9)</a>中描述了基于上古D3D9封装的ID3DXLine通过textured polygons来模拟线宽模式设置。</p>\n<p>基于我在本地平台测试，在Nvidia GeForce RTX 4080 Super显卡上，<del>glLineWidth无效</del>，后来发现其实在我的平台上glLineWidth是有效的，主要是因为设置了<code>glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)</code>，GLFW_OPENGL_FORWARD_COMPAT导致OpenGL上下文是向前兼容模式，效果就是移除Deprecated的API，glLineWidth就是其中一个(4.6 Deprecated); Vulkan通过VkPipelineRasterizationStateCreateInfo::lineWidth设置宽度有效，且有相应的上限值。在网络上线宽设置无效的技术贴早已有之，比如<a href=\"https://forums.developer.nvidia.com/t/gllinewidth-and-gllinestipple-sustainability/71654\">glLineWidth and glLineStipple sustainability</a>, <a href=\"https://community.khronos.org/t/gllinewidth-doesnt-work/14052\">glLineWidth - doesn’t work !</a>, <a href=\"https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan\">Line_width not working in Vulkan</a>都有涉及。</p>\n<blockquote>\n<p>On my hardware, lines are always 1 pixel large, whatever the parameters are, for many years now. Create polygons for larger lines is the solution that will always work.</p>\n</blockquote>\n<p>可见，虽然各家API各异，但是在线渲染宽度上基本一致，完全取决于驱动的实现和硬件的能力。在一般情况下，即便API给出了设置的接口，却并不能十足相信其能够work，最稳妥的方法，还是通过对线段顶点进行四边形扩展来实现宽线段的渲染。</p>\n<h1 id=\"如何渲染线\"><a href=\"#如何渲染线\" class=\"headerlink\" title=\"如何渲染线\"></a>如何渲染线</h1><h1 id=\"抗锯齿\"><a href=\"#抗锯齿\" class=\"headerlink\" title=\"抗锯齿\"></a>抗锯齿</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawArrays.xhtml\">glDrawArrays</a></li>\n<li><a href=\"https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan\">Line_width not working in Vulkan</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"渲染API对于线渲染的支持\"><a href=\"#渲染API对于线渲染的支持\" class=\"headerlink\" title=\"渲染API对于线渲染的支持\"></a>渲染API对于线渲染的支持</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>wireframe</th>\n<th>line mode</th>\n<th>line width</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OpenGL</td>\n<td>glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)</td>\n<td>glDrawArrays: GL_LINES&#x2F;GL_LINE_STRIP&#x2F;GL_LINE_LOOP</td>\n<td>glLineWidth</td>\n</tr>\n<tr>\n<td>Vulkan</td>\n<td>VkPipelineRasterizationStateCreateInfo&#x2F;VK_POLYGON_MODE_LINE</td>\n<td>VkPipelineInputAssemblyStateCreateInfo: VK_PRIMITIVE_TOPOLOGY_LINE_LIST&#x2F;VK_PRIMITIVE_TOPOLOGY_LINE_STRIP</td>\n<td><a href=\"https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html\">vkCmdSetLineWidth</a>, VkPipelineRasterizationStateCreateInfo::lineWidth</td>\n</tr>\n<tr>\n<td>DirectX 11</td>\n<td>D3D11_RASTERIZER_DESC&#x2F;D3D11_FILL_WIREFRAME</td>\n<td>IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_LINELIST)</td>\n<td></td>\n</tr>\n<tr>\n<td>DirectX 12</td>\n<td>D3D12_GRAPHICS_PIPELINE_STATE_DESC&#x2F;D3D12_FILL_WIREFRAME</td>\n<td>D3D12_GRAPHICS_PIPELINE_STATE_DESC&#x2F;D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE, IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY_LINELIST)</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>glLineWidth的<a href=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glLineWidth.xhtml\">文档</a>中说只保证宽度1的设置，其他宽度依赖硬件实现。</p>\n<blockquote>\n<p>Only width 1 is guaranteed to be supported; others depend on the implementation.</p>\n</blockquote>\n<p><a href=\"https://registry.khronos.org/OpenGL/specs/gl/glspec46.core.pdf\">glspec46.core#678</a>把glLineWidth设为Deprecated。</p>\n<blockquote>\n<p>Widelines- LineWidthvalues greater than 1.0 will generate an INVALID_VALUE error.</p>\n</blockquote>\n<p>Vulkan设置线宽度，如果VkPipelineDynamicStateCreateInfo::pDynamicStates设置了VK_DYNAMIC_STATE_LINE_WIDTH，则使用<a href=\"https://registry.khronos.org/vulkan/specs/latest/man/html/vkCmdSetLineWidth.html\">vkCmdSetLineWidth</a>设置后续的线渲染宽度；否则通过VkPipelineRasterizationStateCreateInfo::lineWidth创建pipeline时设置。如果设置非1.0的宽度，依赖硬件的支持，需要查询硬件是否支持VkphysicalDeviceFeatures::wideLines特性，可以通过<a href=\"https://vulkan.gpuinfo.org/listdevices.php\">GPUinfo</a>查询。</p>\n<blockquote>\n<p>If the wideLines feature is not enabled, lineWidth must be 1.0</p>\n</blockquote>\n<p>DX11&#x2F;12都没有明确的API和数据结构支持wide line的渲染。只发现<a href=\"https://learn.microsoft.com/en-us/windows/win32/direct3d9/line-drawing-support-in-d3dx\">Line Drawing Support in D3DX (Direct3D 9)</a>中描述了基于上古D3D9封装的ID3DXLine通过textured polygons来模拟线宽模式设置。</p>\n<p>基于我在本地平台测试，在Nvidia GeForce RTX 4080 Super显卡上，<del>glLineWidth无效</del>，后来发现其实在我的平台上glLineWidth是有效的，主要是因为设置了<code>glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)</code>，GLFW_OPENGL_FORWARD_COMPAT导致OpenGL上下文是向前兼容模式，效果就是移除Deprecated的API，glLineWidth就是其中一个(4.6 Deprecated); Vulkan通过VkPipelineRasterizationStateCreateInfo::lineWidth设置宽度有效，且有相应的上限值。在网络上线宽设置无效的技术贴早已有之，比如<a href=\"https://forums.developer.nvidia.com/t/gllinewidth-and-gllinestipple-sustainability/71654\">glLineWidth and glLineStipple sustainability</a>, <a href=\"https://community.khronos.org/t/gllinewidth-doesnt-work/14052\">glLineWidth - doesn’t work !</a>, <a href=\"https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan\">Line_width not working in Vulkan</a>都有涉及。</p>\n<blockquote>\n<p>On my hardware, lines are always 1 pixel large, whatever the parameters are, for many years now. Create polygons for larger lines is the solution that will always work.</p>\n</blockquote>\n<p>可见，虽然各家API各异，但是在线渲染宽度上基本一致，完全取决于驱动的实现和硬件的能力。在一般情况下，即便API给出了设置的接口，却并不能十足相信其能够work，最稳妥的方法，还是通过对线段顶点进行四边形扩展来实现宽线段的渲染。</p>\n<h1 id=\"如何渲染线\"><a href=\"#如何渲染线\" class=\"headerlink\" title=\"如何渲染线\"></a>如何渲染线</h1><h1 id=\"抗锯齿\"><a href=\"#抗锯齿\" class=\"headerlink\" title=\"抗锯齿\"></a>抗锯齿</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawArrays.xhtml\">glDrawArrays</a></li>\n<li><a href=\"https://stackoverflow.com/questions/44665007/line-width-not-working-in-vulkan\">Line_width not working in Vulkan</a></li>\n</ul>\n"},{"title":"Hello World","date":"2022-12-23T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-12-24 00:00:00\ncategories:\n- Hexo-Next\ntags: \n- Hexo-Next\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2025-02-19T06:10:46.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmt0008hkvc7mmxgmfv","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"利用人脸检测关键点实现简单的图像分割合并操作","date":"2025-02-13T16:00:00.000Z","_content":"\n# 人脸关键点\n使用Google的人脸检测工具MediaPipe来做人脸关键点的检测，可以按照[Face Mesh Detection with Python and OpenCV](https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712)的操作安装MediaPipe并可视化关键点。\n``` python\nimport cv2\nimport mediapipe as mp\n \n#Face Mesh\n \nmp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh()\n \n#Image\n \nimage = cv2.imread(\"/home/python/OpenCV/faceMash/image1.jpg\")\nheight, width, _ = image.shape\nrgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n \n#Facial landmarks\nresult = face_mesh.process(image)\n \n \nfor facial_landmarks in result.multi_face_landmarks:\n   for i in range(0, 468):\n      \n       pt1 = facial_landmarks.landmark[i]\n       x = int(pt1.x * width)\n       y = int(pt1.y * height)\n      \n       cv2.circle(image, (x,y), 2, (100,100,0), -1)\n       #cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))\n \n \n \ncv2.imshow(\"Face Mesh detection\", image)\ncv2.waitKey(0)\n```\n\n[人脸特征点检测指南](https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn)给出了人脸关键点landmarks序列的序号分布，可以通过关键点的序号粗略圈出感兴趣范围。\n\n\n比如眉毛大致范围：\n``` python.\n# 左下角，逆时针\nleft_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]\n# 右下角，顺时针\nright_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]\n```\n\n# 同样大小图片的同一范围做mask以及合并操作\n\n1. 使用opencv的cv2.drawContours生成mask遮罩\n2. 使用numpy的位操作`numpy.invert`、`numpy.bitwist_and`、`numpy.bitwist_or`，能够很方便的完成图片的分割、取反以及合并操作\n\n``` python\nimport cv2\nimport mediapipe as mp\nimport numpy as np\n \n#Face Mesh\n \nmp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh()\n \n#Image\n \nimage = cv2.imread(\"faceinput.png\")\nheight, width, _ = image.shape\nrgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n \n#Facial landmarks\nresult = face_mesh.process(image)\n\n# 左下角，逆时针\nleft_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]\n# 右下角，顺时针\nright_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]\n\nleft_pts = [[]]\nright_pts = [[]]\nfor facial_landmarks in result.multi_face_landmarks:\n    for i in range(0, 468):\n      \n        if i in right_eye or i in left_eye:\n            pt1 = facial_landmarks.landmark[i]\n            x = int(pt1.x * width)\n            y = int(pt1.y * height)\n\n            cv2.circle(image, (x,y), 2, (100,100,0), -1)\n            #cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))\n    \n    for i in left_eye:\n        pt1 = facial_landmarks.landmark[i]\n        x = int(pt1.x * width)\n        y = int(pt1.y * height)\n        left_pts[0].append([x, y])\n\n    for i in right_eye:\n        pt1 = facial_landmarks.landmark[i]\n        x = int(pt1.x * width)\n        y = int(pt1.y * height)\n        right_pts[0].append([x, y])\n\ngrayscaleImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\ngrayscaleImage = cv2.cvtColor(grayscaleImage, cv2.COLOR_GRAY2BGR)\nmaskImage = np.zeros_like(image)\ncv2.drawContours(maskImage, np.array(left_pts), 0, (255, 255, 255), -1)\ncv2.drawContours(maskImage, np.array(right_pts), 0, (255, 255, 255), -1)\nextractedImage=np.bitwise_and(grayscaleImage, maskImage)\n\n# gray image\n# maskImage = np.zeros_like(grayscaleImage)\n# cv2.drawContours(maskImage, np.array(left_pts), 0, 255, -1)\n# cv2.drawContours(maskImage, np.array(right_pts), 0, 255, -1)\n# extractedImage=np.bitwise_and(grayscaleImage, maskImage)\n\ninvert_maskImage = np.invert(maskImage)\nother = cv2.imread(\"face2.png\")\n# other_grayscaleImage = cv2.cvtColor(other, cv2.COLOR_BGR2GRAY)\nextractedOther = np.bitwise_and(other, invert_maskImage)\n\nres = np.bitwise_or(extractedImage, extractedOther)\n\n# cv2.imwrite(\"res.png\", res)\ncv2.imshow(\"Face Mesh detection\", extractedImage)\ncv2.waitKey(0)\n```\n\n# 参考\n- [Face Mesh Detection with Python and OpenCV — Complete Project](https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712)\n- [人脸特征点检测指南](https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn)\n- [extracting a subimage in shape of a polygon](https://stackoverflow.com/questions/15403580/extracting-a-subimage-in-shape-of-a-polygon)\n- [Bit-wise operations](https://numpy.org/doc/2.1/reference/routines.bitwise.html)\n","source":"_posts/利用人脸检测关键点简单分割合并操作.md","raw":"---\ntitle: 利用人脸检测关键点实现简单的图像分割合并操作\ndate: 2025-02-14\ncategories:\n- python\ntags: \n- opencv\n- python\n---\n\n# 人脸关键点\n使用Google的人脸检测工具MediaPipe来做人脸关键点的检测，可以按照[Face Mesh Detection with Python and OpenCV](https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712)的操作安装MediaPipe并可视化关键点。\n``` python\nimport cv2\nimport mediapipe as mp\n \n#Face Mesh\n \nmp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh()\n \n#Image\n \nimage = cv2.imread(\"/home/python/OpenCV/faceMash/image1.jpg\")\nheight, width, _ = image.shape\nrgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n \n#Facial landmarks\nresult = face_mesh.process(image)\n \n \nfor facial_landmarks in result.multi_face_landmarks:\n   for i in range(0, 468):\n      \n       pt1 = facial_landmarks.landmark[i]\n       x = int(pt1.x * width)\n       y = int(pt1.y * height)\n      \n       cv2.circle(image, (x,y), 2, (100,100,0), -1)\n       #cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))\n \n \n \ncv2.imshow(\"Face Mesh detection\", image)\ncv2.waitKey(0)\n```\n\n[人脸特征点检测指南](https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn)给出了人脸关键点landmarks序列的序号分布，可以通过关键点的序号粗略圈出感兴趣范围。\n\n\n比如眉毛大致范围：\n``` python.\n# 左下角，逆时针\nleft_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]\n# 右下角，顺时针\nright_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]\n```\n\n# 同样大小图片的同一范围做mask以及合并操作\n\n1. 使用opencv的cv2.drawContours生成mask遮罩\n2. 使用numpy的位操作`numpy.invert`、`numpy.bitwist_and`、`numpy.bitwist_or`，能够很方便的完成图片的分割、取反以及合并操作\n\n``` python\nimport cv2\nimport mediapipe as mp\nimport numpy as np\n \n#Face Mesh\n \nmp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh()\n \n#Image\n \nimage = cv2.imread(\"faceinput.png\")\nheight, width, _ = image.shape\nrgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n \n#Facial landmarks\nresult = face_mesh.process(image)\n\n# 左下角，逆时针\nleft_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]\n# 右下角，顺时针\nright_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]\n\nleft_pts = [[]]\nright_pts = [[]]\nfor facial_landmarks in result.multi_face_landmarks:\n    for i in range(0, 468):\n      \n        if i in right_eye or i in left_eye:\n            pt1 = facial_landmarks.landmark[i]\n            x = int(pt1.x * width)\n            y = int(pt1.y * height)\n\n            cv2.circle(image, (x,y), 2, (100,100,0), -1)\n            #cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))\n    \n    for i in left_eye:\n        pt1 = facial_landmarks.landmark[i]\n        x = int(pt1.x * width)\n        y = int(pt1.y * height)\n        left_pts[0].append([x, y])\n\n    for i in right_eye:\n        pt1 = facial_landmarks.landmark[i]\n        x = int(pt1.x * width)\n        y = int(pt1.y * height)\n        right_pts[0].append([x, y])\n\ngrayscaleImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\ngrayscaleImage = cv2.cvtColor(grayscaleImage, cv2.COLOR_GRAY2BGR)\nmaskImage = np.zeros_like(image)\ncv2.drawContours(maskImage, np.array(left_pts), 0, (255, 255, 255), -1)\ncv2.drawContours(maskImage, np.array(right_pts), 0, (255, 255, 255), -1)\nextractedImage=np.bitwise_and(grayscaleImage, maskImage)\n\n# gray image\n# maskImage = np.zeros_like(grayscaleImage)\n# cv2.drawContours(maskImage, np.array(left_pts), 0, 255, -1)\n# cv2.drawContours(maskImage, np.array(right_pts), 0, 255, -1)\n# extractedImage=np.bitwise_and(grayscaleImage, maskImage)\n\ninvert_maskImage = np.invert(maskImage)\nother = cv2.imread(\"face2.png\")\n# other_grayscaleImage = cv2.cvtColor(other, cv2.COLOR_BGR2GRAY)\nextractedOther = np.bitwise_and(other, invert_maskImage)\n\nres = np.bitwise_or(extractedImage, extractedOther)\n\n# cv2.imwrite(\"res.png\", res)\ncv2.imshow(\"Face Mesh detection\", extractedImage)\ncv2.waitKey(0)\n```\n\n# 参考\n- [Face Mesh Detection with Python and OpenCV — Complete Project](https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712)\n- [人脸特征点检测指南](https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn)\n- [extracting a subimage in shape of a polygon](https://stackoverflow.com/questions/15403580/extracting-a-subimage-in-shape-of-a-polygon)\n- [Bit-wise operations](https://numpy.org/doc/2.1/reference/routines.bitwise.html)\n","slug":"利用人脸检测关键点简单分割合并操作","published":1,"updated":"2025-02-19T06:10:46.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmt0009hkvc8nrk6up2","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"人脸关键点\"><a href=\"#人脸关键点\" class=\"headerlink\" title=\"人脸关键点\"></a>人脸关键点</h1><p>使用Google的人脸检测工具MediaPipe来做人脸关键点的检测，可以按照<a href=\"https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712\">Face Mesh Detection with Python and OpenCV</a>的操作安装MediaPipe并可视化关键点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> mediapipe <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Face Mesh</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mp_face_mesh = mp.solutions.face_mesh</span><br><span class=\"line\">face_mesh = mp_face_mesh.FaceMesh()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Image</span></span><br><span class=\"line\"> </span><br><span class=\"line\">image = cv2.imread(<span class=\"string\">&quot;/home/python/OpenCV/faceMash/image1.jpg&quot;</span>)</span><br><span class=\"line\">height, width, _ = image.shape</span><br><span class=\"line\">rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Facial landmarks</span></span><br><span class=\"line\">result = face_mesh.process(image)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> facial_landmarks <span class=\"keyword\">in</span> result.multi_face_landmarks:</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">468</span>):</span><br><span class=\"line\">      </span><br><span class=\"line\">       pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">       x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">       y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">      </span><br><span class=\"line\">       cv2.circle(image, (x,y), <span class=\"number\">2</span>, (<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">       <span class=\"comment\">#cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&quot;Face Mesh detection&quot;</span>, image)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn\">人脸特征点检测指南</a>给出了人脸关键点landmarks序列的序号分布，可以通过关键点的序号粗略圈出感兴趣范围。</p>\n<p>比如眉毛大致范围：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 左下角，逆时针</span><br><span class=\"line\">left_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]</span><br><span class=\"line\"># 右下角，顺时针</span><br><span class=\"line\">right_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同样大小图片的同一范围做mask以及合并操作\"><a href=\"#同样大小图片的同一范围做mask以及合并操作\" class=\"headerlink\" title=\"同样大小图片的同一范围做mask以及合并操作\"></a>同样大小图片的同一范围做mask以及合并操作</h1><ol>\n<li>使用opencv的cv2.drawContours生成mask遮罩</li>\n<li>使用numpy的位操作<code>numpy.invert</code>、<code>numpy.bitwist_and</code>、<code>numpy.bitwist_or</code>，能够很方便的完成图片的分割、取反以及合并操作</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> mediapipe <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Face Mesh</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mp_face_mesh = mp.solutions.face_mesh</span><br><span class=\"line\">face_mesh = mp_face_mesh.FaceMesh()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Image</span></span><br><span class=\"line\"> </span><br><span class=\"line\">image = cv2.imread(<span class=\"string\">&quot;faceinput.png&quot;</span>)</span><br><span class=\"line\">height, width, _ = image.shape</span><br><span class=\"line\">rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Facial landmarks</span></span><br><span class=\"line\">result = face_mesh.process(image)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左下角，逆时针</span></span><br><span class=\"line\">left_eye = [<span class=\"number\">46</span>, <span class=\"number\">53</span>, <span class=\"number\">52</span>, <span class=\"number\">65</span>, <span class=\"number\">55</span>, <span class=\"number\">107</span>, <span class=\"number\">66</span>, <span class=\"number\">105</span>, <span class=\"number\">63</span>, <span class=\"number\">70</span>]</span><br><span class=\"line\"><span class=\"comment\"># 右下角，顺时针</span></span><br><span class=\"line\">right_eye =  [<span class=\"number\">276</span>, <span class=\"number\">283</span>, <span class=\"number\">282</span>, <span class=\"number\">295</span>, <span class=\"number\">285</span>, <span class=\"number\">336</span>, <span class=\"number\">296</span>, <span class=\"number\">334</span>, <span class=\"number\">293</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">left_pts = [[]]</span><br><span class=\"line\">right_pts = [[]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> facial_landmarks <span class=\"keyword\">in</span> result.multi_face_landmarks:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">468</span>):</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> right_eye <span class=\"keyword\">or</span> i <span class=\"keyword\">in</span> left_eye:</span><br><span class=\"line\">            pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">            x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">            y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.circle(image, (x,y), <span class=\"number\">2</span>, (<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">#cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> left_eye:</span><br><span class=\"line\">        pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">        x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">        left_pts[<span class=\"number\">0</span>].append([x, y])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> right_eye:</span><br><span class=\"line\">        pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">        x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">        right_pts[<span class=\"number\">0</span>].append([x, y])</span><br><span class=\"line\"></span><br><span class=\"line\">grayscaleImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">grayscaleImage = cv2.cvtColor(grayscaleImage, cv2.COLOR_GRAY2BGR)</span><br><span class=\"line\">maskImage = np.zeros_like(image)</span><br><span class=\"line\">cv2.drawContours(maskImage, np.array(left_pts), <span class=\"number\">0</span>, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">cv2.drawContours(maskImage, np.array(right_pts), <span class=\"number\">0</span>, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">extractedImage=np.bitwise_and(grayscaleImage, maskImage)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gray image</span></span><br><span class=\"line\"><span class=\"comment\"># maskImage = np.zeros_like(grayscaleImage)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.drawContours(maskImage, np.array(left_pts), 0, 255, -1)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.drawContours(maskImage, np.array(right_pts), 0, 255, -1)</span></span><br><span class=\"line\"><span class=\"comment\"># extractedImage=np.bitwise_and(grayscaleImage, maskImage)</span></span><br><span class=\"line\"></span><br><span class=\"line\">invert_maskImage = np.invert(maskImage)</span><br><span class=\"line\">other = cv2.imread(<span class=\"string\">&quot;face2.png&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># other_grayscaleImage = cv2.cvtColor(other, cv2.COLOR_BGR2GRAY)</span></span><br><span class=\"line\">extractedOther = np.bitwise_and(other, invert_maskImage)</span><br><span class=\"line\"></span><br><span class=\"line\">res = np.bitwise_or(extractedImage, extractedOther)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imwrite(&quot;res.png&quot;, res)</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&quot;Face Mesh detection&quot;</span>, extractedImage)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712\">Face Mesh Detection with Python and OpenCV — Complete Project</a></li>\n<li><a href=\"https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn\">人脸特征点检测指南</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15403580/extracting-a-subimage-in-shape-of-a-polygon\">extracting a subimage in shape of a polygon</a></li>\n<li><a href=\"https://numpy.org/doc/2.1/reference/routines.bitwise.html\">Bit-wise operations</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"人脸关键点\"><a href=\"#人脸关键点\" class=\"headerlink\" title=\"人脸关键点\"></a>人脸关键点</h1><p>使用Google的人脸检测工具MediaPipe来做人脸关键点的检测，可以按照<a href=\"https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712\">Face Mesh Detection with Python and OpenCV</a>的操作安装MediaPipe并可视化关键点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> mediapipe <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Face Mesh</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mp_face_mesh = mp.solutions.face_mesh</span><br><span class=\"line\">face_mesh = mp_face_mesh.FaceMesh()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Image</span></span><br><span class=\"line\"> </span><br><span class=\"line\">image = cv2.imread(<span class=\"string\">&quot;/home/python/OpenCV/faceMash/image1.jpg&quot;</span>)</span><br><span class=\"line\">height, width, _ = image.shape</span><br><span class=\"line\">rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Facial landmarks</span></span><br><span class=\"line\">result = face_mesh.process(image)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> facial_landmarks <span class=\"keyword\">in</span> result.multi_face_landmarks:</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">468</span>):</span><br><span class=\"line\">      </span><br><span class=\"line\">       pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">       x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">       y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">      </span><br><span class=\"line\">       cv2.circle(image, (x,y), <span class=\"number\">2</span>, (<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">       <span class=\"comment\">#cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&quot;Face Mesh detection&quot;</span>, image)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn\">人脸特征点检测指南</a>给出了人脸关键点landmarks序列的序号分布，可以通过关键点的序号粗略圈出感兴趣范围。</p>\n<p>比如眉毛大致范围：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 左下角，逆时针</span><br><span class=\"line\">left_eye = [46, 53, 52, 65, 55, 107, 66, 105, 63, 70]</span><br><span class=\"line\"># 右下角，顺时针</span><br><span class=\"line\">right_eye =  [276, 283, 282, 295, 285, 336, 296, 334, 293, 300]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同样大小图片的同一范围做mask以及合并操作\"><a href=\"#同样大小图片的同一范围做mask以及合并操作\" class=\"headerlink\" title=\"同样大小图片的同一范围做mask以及合并操作\"></a>同样大小图片的同一范围做mask以及合并操作</h1><ol>\n<li>使用opencv的cv2.drawContours生成mask遮罩</li>\n<li>使用numpy的位操作<code>numpy.invert</code>、<code>numpy.bitwist_and</code>、<code>numpy.bitwist_or</code>，能够很方便的完成图片的分割、取反以及合并操作</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> mediapipe <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Face Mesh</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mp_face_mesh = mp.solutions.face_mesh</span><br><span class=\"line\">face_mesh = mp_face_mesh.FaceMesh()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Image</span></span><br><span class=\"line\"> </span><br><span class=\"line\">image = cv2.imread(<span class=\"string\">&quot;faceinput.png&quot;</span>)</span><br><span class=\"line\">height, width, _ = image.shape</span><br><span class=\"line\">rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#Facial landmarks</span></span><br><span class=\"line\">result = face_mesh.process(image)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左下角，逆时针</span></span><br><span class=\"line\">left_eye = [<span class=\"number\">46</span>, <span class=\"number\">53</span>, <span class=\"number\">52</span>, <span class=\"number\">65</span>, <span class=\"number\">55</span>, <span class=\"number\">107</span>, <span class=\"number\">66</span>, <span class=\"number\">105</span>, <span class=\"number\">63</span>, <span class=\"number\">70</span>]</span><br><span class=\"line\"><span class=\"comment\"># 右下角，顺时针</span></span><br><span class=\"line\">right_eye =  [<span class=\"number\">276</span>, <span class=\"number\">283</span>, <span class=\"number\">282</span>, <span class=\"number\">295</span>, <span class=\"number\">285</span>, <span class=\"number\">336</span>, <span class=\"number\">296</span>, <span class=\"number\">334</span>, <span class=\"number\">293</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">left_pts = [[]]</span><br><span class=\"line\">right_pts = [[]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> facial_landmarks <span class=\"keyword\">in</span> result.multi_face_landmarks:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">468</span>):</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> right_eye <span class=\"keyword\">or</span> i <span class=\"keyword\">in</span> left_eye:</span><br><span class=\"line\">            pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">            x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">            y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.circle(image, (x,y), <span class=\"number\">2</span>, (<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">#cv2.putText(image, str(i), (x,y), 0,1,(0,0,0))</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> left_eye:</span><br><span class=\"line\">        pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">        x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">        left_pts[<span class=\"number\">0</span>].append([x, y])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> right_eye:</span><br><span class=\"line\">        pt1 = facial_landmarks.landmark[i]</span><br><span class=\"line\">        x = <span class=\"built_in\">int</span>(pt1.x * width)</span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(pt1.y * height)</span><br><span class=\"line\">        right_pts[<span class=\"number\">0</span>].append([x, y])</span><br><span class=\"line\"></span><br><span class=\"line\">grayscaleImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">grayscaleImage = cv2.cvtColor(grayscaleImage, cv2.COLOR_GRAY2BGR)</span><br><span class=\"line\">maskImage = np.zeros_like(image)</span><br><span class=\"line\">cv2.drawContours(maskImage, np.array(left_pts), <span class=\"number\">0</span>, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">cv2.drawContours(maskImage, np.array(right_pts), <span class=\"number\">0</span>, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">extractedImage=np.bitwise_and(grayscaleImage, maskImage)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gray image</span></span><br><span class=\"line\"><span class=\"comment\"># maskImage = np.zeros_like(grayscaleImage)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.drawContours(maskImage, np.array(left_pts), 0, 255, -1)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.drawContours(maskImage, np.array(right_pts), 0, 255, -1)</span></span><br><span class=\"line\"><span class=\"comment\"># extractedImage=np.bitwise_and(grayscaleImage, maskImage)</span></span><br><span class=\"line\"></span><br><span class=\"line\">invert_maskImage = np.invert(maskImage)</span><br><span class=\"line\">other = cv2.imread(<span class=\"string\">&quot;face2.png&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># other_grayscaleImage = cv2.cvtColor(other, cv2.COLOR_BGR2GRAY)</span></span><br><span class=\"line\">extractedOther = np.bitwise_and(other, invert_maskImage)</span><br><span class=\"line\"></span><br><span class=\"line\">res = np.bitwise_or(extractedImage, extractedOther)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imwrite(&quot;res.png&quot;, res)</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&quot;Face Mesh detection&quot;</span>, extractedImage)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://python.plainenglish.io/face-mesh-detection-with-python-and-opencv-complete-project-359d81d6a712\">Face Mesh Detection with Python and OpenCV — Complete Project</a></li>\n<li><a href=\"https://ai.google.dev/edge/mediapipe/solutions/vision/face_landmarker?hl=zh-cn\">人脸特征点检测指南</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15403580/extracting-a-subimage-in-shape-of-a-polygon\">extracting a subimage in shape of a polygon</a></li>\n<li><a href=\"https://numpy.org/doc/2.1/reference/routines.bitwise.html\">Bit-wise operations</a></li>\n</ul>\n"},{"title":"测试","date":"2022-12-24T15:16:56.000Z","_content":"","source":"_posts/测试.md","raw":"---\ntitle: 测试\ndate: 2022-12-24 23:16:56\ncategories:\n- Hexo-Next\ntags: \n- Hexo-Next\n---\n","slug":"测试","published":1,"updated":"2025-02-19T06:10:46.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmu000chkvc6ajx9yc8","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"OpenGL Context创建时需要设置的一些字段","date":"2025-02-19T01:52:31.000Z","_content":"\nOpenGL目前的最新版本是2017年发布的4.6版本，OpenGL老矣也不会再有更新了。尽管OpenGL是一套简单易用的图形API，但是很明显它并没有紧跟图形技术发展的脉搏，不仅仅落后于同时代的DirectX，其自身标准的取舍也使其变的碎片化。模式和兼容性就是其中恶心的一点，本文便是记录GLFW3在创建OpenGL上下文时设置模式和兼容性所设置的一些字段。\n\n以前用GLFW3和OpenGL做一些demo时候，`glfwWindowHint`随意复制粘贴一下然后设置一下OpenGL Context的版本和Profile即可，并没有过多理会其他的字段的含义和差别。毕竟使用`Modern OpenGL`或者`Core Profile`的OpenGL，并不需要在意兼容模式下大量的固定管线API的功能。但是，当实际使用中涉及到了`glLineWidth`这种从上古时代OpenGL 2.0时期延续至今并在OpenGL 4.6中Deprecated的API，更骚气的是其能不能work还要取决于硬件能力和驱动实现，多重buff于一身，某些字段的设置开始变的微妙起来了。\n\n``` cpp\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n// glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);\nglfwWindowHint(GLFW_SAMPLES, 4);\nglfwWindowHint(GLFW_SCALE_TO_MONITOR, GLFW_TRUE);\n\nstd::cout << \"Vendor  \" << glGetString(GL_VENDOR) << std::endl;\nstd::cout << \"Render  \" << glGetString(GL_RENDERER) << std::endl;\nstd::cout << \"GL      \" << glGetString(GL_VERSION) << std::endl;\nstd::cout << \"GLSL    \" << glGetString(GL_SHADING_LANGUAGE_VERSION) << std::endl;\nGLint profile;\nglGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profile);\nstd::cout << \"Profile \" << (profile & GL_CONTEXT_CORE_PROFILE_BIT ? \"Core\" : \"Compatibility\") << std::endl;\n```\n\n这其中一不小心复制了却不知道意义最终影响了结果的字段非`GLFW_OPENGL_FORWARD_COMPAT`莫属，而且要和`GLFW_OPENGL_PROFILE`一同食用为佳。`GLFW_OPENGL_FORWARD_COMPAT`设置OpenGL的向前兼容性，先来了解一下什么是兼容性，简单来说就是：\n- 旧输入，用在新系统，就是向后兼容\n- 新输入，用在旧系统，就是向前兼容\n\nOpenGL中compatibility和profile是两个不同的概念，设置了Forward compatibility的作用是：\n> For 3.2+ compatibility, it should mean nothing at all. Since no functionality is marked deprecated in the compatibility profile, the forward compatibility bit removes nothing.\n> For 3.2+ core, it again means that all functionality that is still deprecated (wide-lines) will be removed.\n\n看看GLFW官方文档的[解释](https://www.glfw.org/docs/3.3/window_guide.html)，特别注意的是macOS如果创建3.2+版本，只支持前向兼容的核心模式（macOS的OpenGL只支持的4.1，万恶的水果）:\n> GLFW_OPENGL_FORWARD_COMPAT specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in the requested version of OpenGL is removed. This must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is requested, this hint is ignored.\n> **Note** macOS: The OS only supports forward-compatible core profile contexts for OpenGL versions 3.2 and later.\n\n这也解释了为啥`glLineWidth`在前向兼容模式线没作用了，不过是在硬件支持wideline的前提下。\n\n![glfw3-forward-compatibility](/images/glfw3-forward-compatibility.png) 图片来自[Backward and Forward Compatibilities](https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627)\n\n\n其他窗口系统也有类似的字段设置，比如WGL的`WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB`和`WGL_CONTEXT_CORE_PROFILE_BIT_ARB`，大同小异，都是映射到OpenGL上下文的相应配置。\n``` cpp\n// 4.6 forward compatible core profile\n\tconst int attribs[] = {\n\t\tWGL_CONTEXT_MAJOR_VERSION_ARB, 4,\n\t\tWGL_CONTEXT_MINOR_VERSION_ARB, 6,\n\t\tWGL_CONTEXT_LAYER_PLANE_ARB, 0, // main plane\n\t\tWGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB | WGL_CONTEXT_DEBUG_BIT_ARB,\n\t\tWGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,\n\t\t0\n\t};\n\t\n\t// wglCreateContextAttribsARB https://www.khronos.org/registry/OpenGL/extensions/ARB/WGL_ARB_create_context.txt\n\tHGLRC gl_context = wglCreateContextAttribsARB(dc, NULL, attribs);\n```\n\n\n**参考**\n- [GLFW: Window guide](https://www.glfw.org/docs/3.3/window_guide.html)\n- [Core And Compatibility in Contexts](https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_types)\n- [How to request a specific OpenGL version?](https://gamedev.stackexchange.com/questions/30441/how-to-request-a-specific-opengl-version)\n- [Detect the OpenGL context profile before version 3.2](https://stackoverflow.com/questions/73745603/detect-the-opengl-context-profile-before-version-3-2)\n- [Backward and Forward Compatibilities](https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627)\n- [WGL Full Demo](https://gist.github.com/tilkinsc/7f383faccf3722622f5d0cc9bd45e7e6)","source":"_posts/OpenGL Context创建时需要设置的一些字段.md","raw":"---\ntitle: OpenGL Context创建时需要设置的一些字段\ndate: 2025-02-19 09:52:31\ncategories:\n- Computer Graphics\n- OpenGL\ntags: \n- Computer Graphics\n- OpenGL\n---\n\nOpenGL目前的最新版本是2017年发布的4.6版本，OpenGL老矣也不会再有更新了。尽管OpenGL是一套简单易用的图形API，但是很明显它并没有紧跟图形技术发展的脉搏，不仅仅落后于同时代的DirectX，其自身标准的取舍也使其变的碎片化。模式和兼容性就是其中恶心的一点，本文便是记录GLFW3在创建OpenGL上下文时设置模式和兼容性所设置的一些字段。\n\n以前用GLFW3和OpenGL做一些demo时候，`glfwWindowHint`随意复制粘贴一下然后设置一下OpenGL Context的版本和Profile即可，并没有过多理会其他的字段的含义和差别。毕竟使用`Modern OpenGL`或者`Core Profile`的OpenGL，并不需要在意兼容模式下大量的固定管线API的功能。但是，当实际使用中涉及到了`glLineWidth`这种从上古时代OpenGL 2.0时期延续至今并在OpenGL 4.6中Deprecated的API，更骚气的是其能不能work还要取决于硬件能力和驱动实现，多重buff于一身，某些字段的设置开始变的微妙起来了。\n\n``` cpp\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n// glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);\nglfwWindowHint(GLFW_SAMPLES, 4);\nglfwWindowHint(GLFW_SCALE_TO_MONITOR, GLFW_TRUE);\n\nstd::cout << \"Vendor  \" << glGetString(GL_VENDOR) << std::endl;\nstd::cout << \"Render  \" << glGetString(GL_RENDERER) << std::endl;\nstd::cout << \"GL      \" << glGetString(GL_VERSION) << std::endl;\nstd::cout << \"GLSL    \" << glGetString(GL_SHADING_LANGUAGE_VERSION) << std::endl;\nGLint profile;\nglGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profile);\nstd::cout << \"Profile \" << (profile & GL_CONTEXT_CORE_PROFILE_BIT ? \"Core\" : \"Compatibility\") << std::endl;\n```\n\n这其中一不小心复制了却不知道意义最终影响了结果的字段非`GLFW_OPENGL_FORWARD_COMPAT`莫属，而且要和`GLFW_OPENGL_PROFILE`一同食用为佳。`GLFW_OPENGL_FORWARD_COMPAT`设置OpenGL的向前兼容性，先来了解一下什么是兼容性，简单来说就是：\n- 旧输入，用在新系统，就是向后兼容\n- 新输入，用在旧系统，就是向前兼容\n\nOpenGL中compatibility和profile是两个不同的概念，设置了Forward compatibility的作用是：\n> For 3.2+ compatibility, it should mean nothing at all. Since no functionality is marked deprecated in the compatibility profile, the forward compatibility bit removes nothing.\n> For 3.2+ core, it again means that all functionality that is still deprecated (wide-lines) will be removed.\n\n看看GLFW官方文档的[解释](https://www.glfw.org/docs/3.3/window_guide.html)，特别注意的是macOS如果创建3.2+版本，只支持前向兼容的核心模式（macOS的OpenGL只支持的4.1，万恶的水果）:\n> GLFW_OPENGL_FORWARD_COMPAT specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in the requested version of OpenGL is removed. This must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is requested, this hint is ignored.\n> **Note** macOS: The OS only supports forward-compatible core profile contexts for OpenGL versions 3.2 and later.\n\n这也解释了为啥`glLineWidth`在前向兼容模式线没作用了，不过是在硬件支持wideline的前提下。\n\n![glfw3-forward-compatibility](/images/glfw3-forward-compatibility.png) 图片来自[Backward and Forward Compatibilities](https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627)\n\n\n其他窗口系统也有类似的字段设置，比如WGL的`WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB`和`WGL_CONTEXT_CORE_PROFILE_BIT_ARB`，大同小异，都是映射到OpenGL上下文的相应配置。\n``` cpp\n// 4.6 forward compatible core profile\n\tconst int attribs[] = {\n\t\tWGL_CONTEXT_MAJOR_VERSION_ARB, 4,\n\t\tWGL_CONTEXT_MINOR_VERSION_ARB, 6,\n\t\tWGL_CONTEXT_LAYER_PLANE_ARB, 0, // main plane\n\t\tWGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB | WGL_CONTEXT_DEBUG_BIT_ARB,\n\t\tWGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,\n\t\t0\n\t};\n\t\n\t// wglCreateContextAttribsARB https://www.khronos.org/registry/OpenGL/extensions/ARB/WGL_ARB_create_context.txt\n\tHGLRC gl_context = wglCreateContextAttribsARB(dc, NULL, attribs);\n```\n\n\n**参考**\n- [GLFW: Window guide](https://www.glfw.org/docs/3.3/window_guide.html)\n- [Core And Compatibility in Contexts](https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_types)\n- [How to request a specific OpenGL version?](https://gamedev.stackexchange.com/questions/30441/how-to-request-a-specific-opengl-version)\n- [Detect the OpenGL context profile before version 3.2](https://stackoverflow.com/questions/73745603/detect-the-opengl-context-profile-before-version-3-2)\n- [Backward and Forward Compatibilities](https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627)\n- [WGL Full Demo](https://gist.github.com/tilkinsc/7f383faccf3722622f5d0cc9bd45e7e6)","slug":"OpenGL Context创建时需要设置的一些字段","published":1,"updated":"2025-02-19T06:10:46.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7bjjnmu000dhkvc2el39cjc","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>OpenGL目前的最新版本是2017年发布的4.6版本，OpenGL老矣也不会再有更新了。尽管OpenGL是一套简单易用的图形API，但是很明显它并没有紧跟图形技术发展的脉搏，不仅仅落后于同时代的DirectX，其自身标准的取舍也使其变的碎片化。模式和兼容性就是其中恶心的一点，本文便是记录GLFW3在创建OpenGL上下文时设置模式和兼容性所设置的一些字段。</p>\n<p>以前用GLFW3和OpenGL做一些demo时候，<code>glfwWindowHint</code>随意复制粘贴一下然后设置一下OpenGL Context的版本和Profile即可，并没有过多理会其他的字段的含义和差别。毕竟使用<code>Modern OpenGL</code>或者<code>Core Profile</code>的OpenGL，并不需要在意兼容模式下大量的固定管线API的功能。但是，当实际使用中涉及到了<code>glLineWidth</code>这种从上古时代OpenGL 2.0时期延续至今并在OpenGL 4.6中Deprecated的API，更骚气的是其能不能work还要取决于硬件能力和驱动实现，多重buff于一身，某些字段的设置开始变的微妙起来了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\"><span class=\"comment\">// glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);</span></span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_SAMPLES, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_SCALE_TO_MONITOR, GLFW_TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Vendor  &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_VENDOR) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Render  &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_RENDERER) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;GL      &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_VERSION) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;GLSL    &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_SHADING_LANGUAGE_VERSION) &lt;&lt; std::endl;</span><br><span class=\"line\">GLint profile;</span><br><span class=\"line\"><span class=\"built_in\">glGetIntegerv</span>(GL_CONTEXT_PROFILE_MASK, &amp;profile);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Profile &quot;</span> &lt;&lt; (profile &amp; GL_CONTEXT_CORE_PROFILE_BIT ? <span class=\"string\">&quot;Core&quot;</span> : <span class=\"string\">&quot;Compatibility&quot;</span>) &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>这其中一不小心复制了却不知道意义最终影响了结果的字段非<code>GLFW_OPENGL_FORWARD_COMPAT</code>莫属，而且要和<code>GLFW_OPENGL_PROFILE</code>一同食用为佳。<code>GLFW_OPENGL_FORWARD_COMPAT</code>设置OpenGL的向前兼容性，先来了解一下什么是兼容性，简单来说就是：</p>\n<ul>\n<li>旧输入，用在新系统，就是向后兼容</li>\n<li>新输入，用在旧系统，就是向前兼容</li>\n</ul>\n<p>OpenGL中compatibility和profile是两个不同的概念，设置了Forward compatibility的作用是：</p>\n<blockquote>\n<p>For 3.2+ compatibility, it should mean nothing at all. Since no functionality is marked deprecated in the compatibility profile, the forward compatibility bit removes nothing.<br>For 3.2+ core, it again means that all functionality that is still deprecated (wide-lines) will be removed.</p>\n</blockquote>\n<p>看看GLFW官方文档的<a href=\"https://www.glfw.org/docs/3.3/window_guide.html\">解释</a>，特别注意的是macOS如果创建3.2+版本，只支持前向兼容的核心模式（macOS的OpenGL只支持的4.1，万恶的水果）:</p>\n<blockquote>\n<p>GLFW_OPENGL_FORWARD_COMPAT specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in the requested version of OpenGL is removed. This must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is requested, this hint is ignored.<br><strong>Note</strong> macOS: The OS only supports forward-compatible core profile contexts for OpenGL versions 3.2 and later.</p>\n</blockquote>\n<p>这也解释了为啥<code>glLineWidth</code>在前向兼容模式线没作用了，不过是在硬件支持wideline的前提下。</p>\n<p><img src=\"/images/glfw3-forward-compatibility.png\" alt=\"glfw3-forward-compatibility\"> 图片来自<a href=\"https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627\">Backward and Forward Compatibilities</a></p>\n<p>其他窗口系统也有类似的字段设置，比如WGL的<code>WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</code>和<code>WGL_CONTEXT_CORE_PROFILE_BIT_ARB</code>，大同小异，都是映射到OpenGL上下文的相应配置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4.6 forward compatible core profile</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> attribs[] = &#123;</span><br><span class=\"line\">\t\tWGL_CONTEXT_MAJOR_VERSION_ARB, <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\tWGL_CONTEXT_MINOR_VERSION_ARB, <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\tWGL_CONTEXT_LAYER_PLANE_ARB, <span class=\"number\">0</span>, <span class=\"comment\">// main plane</span></span><br><span class=\"line\">\t\tWGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB | WGL_CONTEXT_DEBUG_BIT_ARB,</span><br><span class=\"line\">\t\tWGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// wglCreateContextAttribsARB https://www.khronos.org/registry/OpenGL/extensions/ARB/WGL_ARB_create_context.txt</span></span><br><span class=\"line\">\tHGLRC gl_context = <span class=\"built_in\">wglCreateContextAttribsARB</span>(dc, <span class=\"literal\">NULL</span>, attribs);</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"https://www.glfw.org/docs/3.3/window_guide.html\">GLFW: Window guide</a></li>\n<li><a href=\"https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_types\">Core And Compatibility in Contexts</a></li>\n<li><a href=\"https://gamedev.stackexchange.com/questions/30441/how-to-request-a-specific-opengl-version\">How to request a specific OpenGL version?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/73745603/detect-the-opengl-context-profile-before-version-3-2\">Detect the OpenGL context profile before version 3.2</a></li>\n<li><a href=\"https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627\">Backward and Forward Compatibilities</a></li>\n<li><a href=\"https://gist.github.com/tilkinsc/7f383faccf3722622f5d0cc9bd45e7e6\">WGL Full Demo</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>OpenGL目前的最新版本是2017年发布的4.6版本，OpenGL老矣也不会再有更新了。尽管OpenGL是一套简单易用的图形API，但是很明显它并没有紧跟图形技术发展的脉搏，不仅仅落后于同时代的DirectX，其自身标准的取舍也使其变的碎片化。模式和兼容性就是其中恶心的一点，本文便是记录GLFW3在创建OpenGL上下文时设置模式和兼容性所设置的一些字段。</p>\n<p>以前用GLFW3和OpenGL做一些demo时候，<code>glfwWindowHint</code>随意复制粘贴一下然后设置一下OpenGL Context的版本和Profile即可，并没有过多理会其他的字段的含义和差别。毕竟使用<code>Modern OpenGL</code>或者<code>Core Profile</code>的OpenGL，并不需要在意兼容模式下大量的固定管线API的功能。但是，当实际使用中涉及到了<code>glLineWidth</code>这种从上古时代OpenGL 2.0时期延续至今并在OpenGL 4.6中Deprecated的API，更骚气的是其能不能work还要取决于硬件能力和驱动实现，多重buff于一身，某些字段的设置开始变的微妙起来了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\"><span class=\"comment\">// glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);</span></span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_SAMPLES, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">glfwWindowHint</span>(GLFW_SCALE_TO_MONITOR, GLFW_TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Vendor  &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_VENDOR) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Render  &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_RENDERER) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;GL      &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_VERSION) &lt;&lt; std::endl;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;GLSL    &quot;</span> &lt;&lt; <span class=\"built_in\">glGetString</span>(GL_SHADING_LANGUAGE_VERSION) &lt;&lt; std::endl;</span><br><span class=\"line\">GLint profile;</span><br><span class=\"line\"><span class=\"built_in\">glGetIntegerv</span>(GL_CONTEXT_PROFILE_MASK, &amp;profile);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Profile &quot;</span> &lt;&lt; (profile &amp; GL_CONTEXT_CORE_PROFILE_BIT ? <span class=\"string\">&quot;Core&quot;</span> : <span class=\"string\">&quot;Compatibility&quot;</span>) &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>这其中一不小心复制了却不知道意义最终影响了结果的字段非<code>GLFW_OPENGL_FORWARD_COMPAT</code>莫属，而且要和<code>GLFW_OPENGL_PROFILE</code>一同食用为佳。<code>GLFW_OPENGL_FORWARD_COMPAT</code>设置OpenGL的向前兼容性，先来了解一下什么是兼容性，简单来说就是：</p>\n<ul>\n<li>旧输入，用在新系统，就是向后兼容</li>\n<li>新输入，用在旧系统，就是向前兼容</li>\n</ul>\n<p>OpenGL中compatibility和profile是两个不同的概念，设置了Forward compatibility的作用是：</p>\n<blockquote>\n<p>For 3.2+ compatibility, it should mean nothing at all. Since no functionality is marked deprecated in the compatibility profile, the forward compatibility bit removes nothing.<br>For 3.2+ core, it again means that all functionality that is still deprecated (wide-lines) will be removed.</p>\n</blockquote>\n<p>看看GLFW官方文档的<a href=\"https://www.glfw.org/docs/3.3/window_guide.html\">解释</a>，特别注意的是macOS如果创建3.2+版本，只支持前向兼容的核心模式（macOS的OpenGL只支持的4.1，万恶的水果）:</p>\n<blockquote>\n<p>GLFW_OPENGL_FORWARD_COMPAT specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in the requested version of OpenGL is removed. This must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is requested, this hint is ignored.<br><strong>Note</strong> macOS: The OS only supports forward-compatible core profile contexts for OpenGL versions 3.2 and later.</p>\n</blockquote>\n<p>这也解释了为啥<code>glLineWidth</code>在前向兼容模式线没作用了，不过是在硬件支持wideline的前提下。</p>\n<p><img src=\"/images/glfw3-forward-compatibility.png\" alt=\"glfw3-forward-compatibility\"> 图片来自<a href=\"https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627\">Backward and Forward Compatibilities</a></p>\n<p>其他窗口系统也有类似的字段设置，比如WGL的<code>WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</code>和<code>WGL_CONTEXT_CORE_PROFILE_BIT_ARB</code>，大同小异，都是映射到OpenGL上下文的相应配置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4.6 forward compatible core profile</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> attribs[] = &#123;</span><br><span class=\"line\">\t\tWGL_CONTEXT_MAJOR_VERSION_ARB, <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\tWGL_CONTEXT_MINOR_VERSION_ARB, <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\tWGL_CONTEXT_LAYER_PLANE_ARB, <span class=\"number\">0</span>, <span class=\"comment\">// main plane</span></span><br><span class=\"line\">\t\tWGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB | WGL_CONTEXT_DEBUG_BIT_ARB,</span><br><span class=\"line\">\t\tWGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// wglCreateContextAttribsARB https://www.khronos.org/registry/OpenGL/extensions/ARB/WGL_ARB_create_context.txt</span></span><br><span class=\"line\">\tHGLRC gl_context = <span class=\"built_in\">wglCreateContextAttribsARB</span>(dc, <span class=\"literal\">NULL</span>, attribs);</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"https://www.glfw.org/docs/3.3/window_guide.html\">GLFW: Window guide</a></li>\n<li><a href=\"https://www.khronos.org/opengl/wiki/OpenGL_Context#Context_types\">Core And Compatibility in Contexts</a></li>\n<li><a href=\"https://gamedev.stackexchange.com/questions/30441/how-to-request-a-specific-opengl-version\">How to request a specific OpenGL version?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/73745603/detect-the-opengl-context-profile-before-version-3-2\">Detect the OpenGL context profile before version 3.2</a></li>\n<li><a href=\"https://medium.com/@wangberlin2000/backward-and-forward-compatibilities-a71e52683627\">Backward and Forward Compatibilities</a></li>\n<li><a href=\"https://gist.github.com/tilkinsc/7f383faccf3722622f5d0cc9bd45e7e6\">WGL Full Demo</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm7bjjnmt0008hkvc7mmxgmfv","category_id":"cm7bjjnmr0004hkvc2lgmfjmw","_id":"cm7bjjnmu000ehkvc7kko7lna"},{"post_id":"cm7bjjnmo0001hkvc9hhm6f5f","category_id":"cm7bjjnmr0004hkvc2lgmfjmw","_id":"cm7bjjnmv000hhkvc8n084rj3"},{"post_id":"cm7bjjnmu000chkvc6ajx9yc8","category_id":"cm7bjjnmr0004hkvc2lgmfjmw","_id":"cm7bjjnmv000jhkvcf0embyrb"},{"post_id":"cm7bjjnmr0003hkvc23054u05","category_id":"cm7bjjnmr0004hkvc2lgmfjmw","_id":"cm7bjjnmv000nhkvcfvj4ch2o"},{"post_id":"cm7bjjnmt0009hkvc8nrk6up2","category_id":"cm7bjjnmv000lhkvc6zr5d8fp","_id":"cm7bjjnmw000shkvch1ztfnmf"},{"post_id":"cm7bjjnms0007hkvc4qbg8nvz","category_id":"cm7bjjnmu000fhkvcfcfz7537","_id":"cm7bjjnmw000zhkvcaawd6z62"},{"post_id":"cm7bjjnms0007hkvc4qbg8nvz","category_id":"cm7bjjnmw000rhkvc8qio12ao","_id":"cm7bjjnmw0011hkvcblhwdugr"},{"post_id":"cm7bjjnmu000dhkvc2el39cjc","category_id":"cm7bjjnmu000fhkvcfcfz7537","_id":"cm7bjjnmw0012hkvcg3l44pwn"},{"post_id":"cm7bjjnmu000dhkvc2el39cjc","category_id":"cm7bjjnmw000rhkvc8qio12ao","_id":"cm7bjjnmw0014hkvc4k247loe"}],"PostTag":[{"post_id":"cm7bjjnmo0001hkvc9hhm6f5f","tag_id":"cm7bjjnms0005hkvccloi910c","_id":"cm7bjjnmv000ihkvc87og4277"},{"post_id":"cm7bjjnmo0001hkvc9hhm6f5f","tag_id":"cm7bjjnmt000bhkvc33626e7h","_id":"cm7bjjnmv000khkvcaxbofgi9"},{"post_id":"cm7bjjnmr0003hkvc23054u05","tag_id":"cm7bjjnmv000ghkvc0kqaf8qm","_id":"cm7bjjnmv000ohkvc3hxqeham"},{"post_id":"cm7bjjnms0007hkvc4qbg8nvz","tag_id":"cm7bjjnmv000mhkvcd2iehco8","_id":"cm7bjjnmw000uhkvc42zhdtkr"},{"post_id":"cm7bjjnms0007hkvc4qbg8nvz","tag_id":"cm7bjjnmv000qhkvc7q8ret7n","_id":"cm7bjjnmw000whkvcaw675gkf"},{"post_id":"cm7bjjnmt0008hkvc7mmxgmfv","tag_id":"cm7bjjnmv000ghkvc0kqaf8qm","_id":"cm7bjjnmw000yhkvcf749999f"},{"post_id":"cm7bjjnmt0009hkvc8nrk6up2","tag_id":"cm7bjjnmw000xhkvcczxw8cok","_id":"cm7bjjnmw0015hkvc247g5y3p"},{"post_id":"cm7bjjnmt0009hkvc8nrk6up2","tag_id":"cm7bjjnmw0010hkvcd1de0tet","_id":"cm7bjjnmw0016hkvcge42fhue"},{"post_id":"cm7bjjnmu000chkvc6ajx9yc8","tag_id":"cm7bjjnmv000ghkvc0kqaf8qm","_id":"cm7bjjnmw0018hkvc569ebv19"},{"post_id":"cm7bjjnmu000dhkvc2el39cjc","tag_id":"cm7bjjnmv000mhkvcd2iehco8","_id":"cm7bjjnmx001ahkvc4ekgbrw3"},{"post_id":"cm7bjjnmu000dhkvc2el39cjc","tag_id":"cm7bjjnmv000qhkvc7q8ret7n","_id":"cm7bjjnmx001bhkvc2uwxga88"}],"Tag":[{"name":"Hexo","_id":"cm7bjjnms0005hkvccloi910c"},{"name":"Next","_id":"cm7bjjnmt000bhkvc33626e7h"},{"name":"Hexo-Next","_id":"cm7bjjnmv000ghkvc0kqaf8qm"},{"name":"Computer Graphics","_id":"cm7bjjnmv000mhkvcd2iehco8"},{"name":"OpenGL","_id":"cm7bjjnmv000qhkvc7q8ret7n"},{"name":"opencv","_id":"cm7bjjnmw000xhkvcczxw8cok"},{"name":"python","_id":"cm7bjjnmw0010hkvcd1de0tet"}]}}